{"ast":null,"code":"var _jsxFileName = \"/Users/danielcr/Documents/GitHub/Biossay/GstFront/biossay-webapp/src/components/configuration/components/modalModel.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { Dialog, DialogTitle, FormControl, DialogContent, TextField, DialogActions, Button, Select, MenuItem } from \"@material-ui/core\";\nimport { getBranches, saveModelLine, getModelLineById } from \"../../../services/api/ConfigService\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ModalModel = props => {\n  _s();\n\n  const {\n    isOpen,\n    handleClose,\n    modelId\n  } = props;\n  const [branches, setBranches] = useState([]);\n  const [model, setModel] = useState({\n    Id: 0,\n    Name: '',\n    BranchId: 0\n  });\n  useEffect(() => {\n    getBranches().then(response => {\n      setBranches(response.data);\n    });\n    getModelLineById(modelId).then(response => {\n      setModel({\n        Id: response.data.id,\n        Name: response.data.name,\n        BranchId: response.data.branchId\n      });\n    });\n  }, [isOpen]);\n\n  const saveModelLocal = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setModel(last => ({ ...last,\n      [name]: value\n    }));\n  };\n\n  const sendModelServer = () => {\n    saveModelLine(model).then(response => {\n      console.log(response.data);\n      handleClose();\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(Dialog, {\n    open: isOpen,\n    onClose: handleClose,\n    \"aria-labelledby\": \"form-dialog-title\",\n    children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n      id: \"form-dialog-title\",\n      children: \"Modelo\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 14\n    }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n      children: [/*#__PURE__*/_jsxDEV(FormControl, {\n        fullWidth: true,\n        variant: \"outlined\",\n        children: /*#__PURE__*/_jsxDEV(Select, {\n          fullWidth: true,\n          label: \"Marca\",\n          name: \"BranchId\",\n          value: model.BranchId || '0',\n          onChange: saveModelLocal,\n          children: [/*#__PURE__*/_jsxDEV(MenuItem, {\n            value: \"0\",\n            children: /*#__PURE__*/_jsxDEV(\"em\", {\n              children: \"Seleccione\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 56,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 25\n          }, this), branches.map(n => /*#__PURE__*/_jsxDEV(MenuItem, {\n            value: n.id,\n            children: n.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 27\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        autoFocus: true,\n        margin: \"dense\",\n        name: \"Name\",\n        value: model.Name,\n        label: \"Descripci\\xF3n\",\n        onChange: saveModelLocal,\n        type: \"text\",\n        fullWidth: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        onClick: handleClose,\n        color: \"primary\",\n        children: \"Salir\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: sendModelServer,\n        color: \"primary\",\n        children: \"Guardar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ModalModel, \"TTzgmLfYWSWTxHfcG/xHOP4rk5Q=\");\n\n_c = ModalModel;\nexport default ModalModel;\n\nvar _c;\n\n$RefreshReg$(_c, \"ModalModel\");","map":{"version":3,"sources":["/Users/danielcr/Documents/GitHub/Biossay/GstFront/biossay-webapp/src/components/configuration/components/modalModel.js"],"names":["React","useState","useEffect","Dialog","DialogTitle","FormControl","DialogContent","TextField","DialogActions","Button","Select","MenuItem","getBranches","saveModelLine","getModelLineById","ModalModel","props","isOpen","handleClose","modelId","branches","setBranches","model","setModel","Id","Name","BranchId","then","response","data","id","name","branchId","saveModelLocal","e","value","target","last","sendModelServer","console","log","map","n"],"mappings":"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","sourcesContent":["import React,{useState,useEffect} from \"react\";\nimport {Dialog,DialogTitle,FormControl,DialogContent,TextField,DialogActions,Button,Select,MenuItem} from \"@material-ui/core\";\nimport { getBranches,saveModelLine, getModelLineById } from \"../../../services/api/ConfigService\";\n\nconst ModalModel= (props)=>{\nconst { isOpen, handleClose ,modelId } = props;\nconst [ branches , setBranches] = useState([]);\nconst [ model, setModel] = useState({\n  Id: 0,\n  Name : '',\n  BranchId : 0\n});\n\nuseEffect(() => {\n    getBranches().then(response =>{\n      setBranches(response.data)\n    });  \n    getModelLineById(modelId).then(response =>{\n        setModel({\n          Id: response.data.id,\n          Name : response.data.name,\n          BranchId : response.data.branchId\n        });\n    });\n}, [isOpen])\n\nconst saveModelLocal = (e)=>{\n  const { name , value } = e.target;\n\n  setModel((last) => ({\n    ...last,\n    [name]: value\n  }));\n}\n\nconst sendModelServer = ()=>{\n  saveModelLine(model).then(response =>{\n    console.log(response.data);\n    handleClose();\n  });\n}\n\n    return(\n        <Dialog open={isOpen} onClose={handleClose} aria-labelledby=\"form-dialog-title\">\n             <DialogTitle id=\"form-dialog-title\">Modelo</DialogTitle>\n        <DialogContent>\n        <FormControl fullWidth variant=\"outlined\"  > \n                    <Select \n                        fullWidth\n                        label=\"Marca\"\n                        name=\"BranchId\"\n                        value={model.BranchId || '0'}\n                        onChange={saveModelLocal}\n                        >\n                        <MenuItem value=\"0\">\n                            <em>Seleccione</em>\n                        </MenuItem>\n                        {(branches.map((n) => \n                          <MenuItem value={n.id}>{n.name}</MenuItem>\n                        ))}\n                      </Select>\n                    \n                    </FormControl>\n          <TextField\n            autoFocus\n            margin=\"dense\"\n            name=\"Name\"\n            value={model.Name}\n            label=\"Descripción\"\n            onChange={saveModelLocal}\n            type=\"text\"\n            fullWidth\n          />\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleClose} color=\"primary\">\n            Salir\n          </Button>\n          <Button onClick={sendModelServer} color=\"primary\">\n            Guardar\n          </Button>\n        </DialogActions>\n        </Dialog>\n    )\n}\nexport default ModalModel;"]},"metadata":{},"sourceType":"module"}