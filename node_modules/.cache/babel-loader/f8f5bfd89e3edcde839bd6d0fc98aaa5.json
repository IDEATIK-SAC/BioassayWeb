{"ast":null,"code":"import HttpClient from \"../HttpClient\";\nexport const saveBranch = model => {\n  return new Promise((resolve, reject) => {\n    HttpClient.post('/RequestDocument/SaveBranch', model).then(response => {\n      resolve(response);\n    }).catch(error => {\n      resolve(error.response);\n    });\n  });\n};\nexport const saveLine = model => {\n  return new Promise((resolve, reject) => {\n    HttpClient.post('/RequestDocument/SaveLine', model).then(response => {\n      resolve(response);\n    }).catch(error => {\n      resolve(error.response);\n    });\n  });\n};\nexport const deleteLine = model => {\n  return new Promise((resolve, reject) => {\n    HttpClient.post('/RequestDocument/DeleteLine', model).then(response => {\n      resolve(response);\n    }).catch(error => {\n      resolve(error.response);\n    });\n  });\n};\nexport const saveModelLine = model => {\n  return new Promise((resolve, reject) => {\n    HttpClient.post('/RequestDocument/SaveModelLine', model).then(response => {\n      resolve(response);\n    }).catch(error => {\n      resolve(error.response);\n    });\n  });\n};\nexport const getLineById = id => {\n  return new Promise((resolve, reject) => {\n    HttpClient.get('/RequestDocument/GetLineById?lineid=' + id).then(response => {\n      resolve(response);\n    }).catch(error => {\n      resolve(error.response);\n    });\n  });\n};\nexport const getLines = () => {\n  return new Promise((resolve, reject) => {\n    HttpClient.get('/RequestDocument/GetLines').then(response => {\n      resolve(response);\n    }).catch(error => {\n      resolve(error.response);\n    });\n  });\n};\nexport const getBranchById = id => {\n  return new Promise((resolve, reject) => {\n    HttpClient.get('/RequestDocument/GetBranchById?branchid=' + id).then(response => {\n      resolve(response);\n    }).catch(error => {\n      resolve(error.response);\n    });\n  });\n};\nexport const getBranches = id => {\n  return new Promise((resolve, reject) => {\n    HttpClient.get('/RequestDocument/GetBranches').then(response => {\n      resolve(response);\n    }).catch(error => {\n      resolve(error.response);\n    });\n  });\n};\nexport const getBranchByLine = lineid => {\n  return new Promise((resolve, reject) => {\n    HttpClient.get('/RequestDocument/GetBranchByLine?lineid=' + lineid).then(response => {\n      resolve(response);\n    }).catch(error => {\n      resolve(error.response);\n    });\n  });\n};\nexport const getModelLineById = id => {\n  return new Promise((resolve, reject) => {\n    HttpClient.get('/RequestDocument/GetModelLineById?modelid=' + id).then(response => {\n      resolve(response);\n    }).catch(error => {\n      resolve(error.response);\n    });\n  });\n};\nexport const getModelLinesByBranch = branchid => {\n  return new Promise((resolve, reject) => {\n    HttpClient.get('/RequestDocument/GetModelLinesByBranch?branchid=' + branchid).then(response => {\n      resolve(response);\n    }).catch(error => {\n      resolve(error.response);\n    });\n  });\n};","map":{"version":3,"sources":["/Users/danielcr/Documents/GitHub/Biossay/GstFront/biossay-webapp/src/services/api/ConfigService.js"],"names":["HttpClient","saveBranch","model","Promise","resolve","reject","post","then","response","catch","error","saveLine","deleteLine","saveModelLine","getLineById","id","get","getLines","getBranchById","getBranches","getBranchByLine","lineid","getModelLineById","getModelLinesByBranch","branchid"],"mappings":"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","sourcesContent":["import HttpClient from \"../HttpClient\";\n\nexport const saveBranch = (model) =>{ \n    return new Promise((resolve, reject) => {\n        HttpClient.post('/RequestDocument/SaveBranch' , model).then(response => {\n            resolve(response);\n        }).catch(error => {\n            resolve(error.response);\n        })\n    })\n}\nexport const saveLine = (model) =>{ \n    return new Promise((resolve, reject) => {\n        HttpClient.post('/RequestDocument/SaveLine' , model).then(response => {\n            resolve(response);\n        }).catch(error => {\n            resolve(error.response);\n        })\n    })\n}\n\nexport const deleteLine = (model) =>{ \n    return new Promise((resolve, reject) => {\n        HttpClient.post('/RequestDocument/DeleteLine' , model).then(response => {\n            resolve(response);\n        }).catch(error => {\n            resolve(error.response);\n        })\n    })\n}\n\nexport const saveModelLine = (model) =>{ \n    return new Promise((resolve, reject) => {\n        HttpClient.post('/RequestDocument/SaveModelLine' , model).then(response => {\n            resolve(response);\n        }).catch(error => {\n            resolve(error.response);\n        })\n    })\n}\n\nexport const getLineById =(id)=> {\n    return new Promise((resolve, reject) => {\n         HttpClient.get('/RequestDocument/GetLineById?lineid='+ id).then(response => {\n             resolve(response);\n         }).catch(error => {\n             resolve(error.response);\n         })\n     })\n }\n\n export const getLines =()=> {\n    return new Promise((resolve, reject) => {\n         HttpClient.get('/RequestDocument/GetLines').then(response => {\n             resolve(response);\n         }).catch(error => {\n             resolve(error.response);\n         })\n     })\n }\n\n\nexport const getBranchById =(id)=> {\n    return new Promise((resolve, reject) => {\n         HttpClient.get('/RequestDocument/GetBranchById?branchid='+ id).then(response => {\n             resolve(response);\n         }).catch(error => {\n             resolve(error.response);\n         })\n     })\n }\n\n export const getBranches =(id)=> {\n    return new Promise((resolve, reject) => {\n         HttpClient.get('/RequestDocument/GetBranches').then(response => {\n             resolve(response);\n         }).catch(error => {\n             resolve(error.response);\n         })\n     })\n }\n\n export const getBranchByLine =(lineid)=> {\n    return new Promise((resolve, reject) => {\n         HttpClient.get('/RequestDocument/GetBranchByLine?lineid='+lineid).then(response => {\n             resolve(response);\n         }).catch(error => {\n             resolve(error.response);\n         })\n     })\n }\n\n export const getModelLineById =(id)=> {\n    return new Promise((resolve, reject) => {\n         HttpClient.get('/RequestDocument/GetModelLineById?modelid='+ id).then(response => {\n             resolve(response);\n         }).catch(error => {\n             resolve(error.response);\n         })\n     })\n }\n\n export const getModelLinesByBranch =(branchid)=> {\n    return new Promise((resolve, reject) => {\n         HttpClient.get('/RequestDocument/GetModelLinesByBranch?branchid='+branchid).then(response => {\n             resolve(response);\n         }).catch(error => {\n             resolve(error.response);\n         })\n     })\n }\n"]},"metadata":{},"sourceType":"module"}