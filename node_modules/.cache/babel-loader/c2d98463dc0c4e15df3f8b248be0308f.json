{"ast":null,"code":"var _jsxFileName = \"/Users/danielcr/Documents/GitHub/Biossay/GstFront/biossay-webapp/src/components/configuration/components/modalLine.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { Dialog, DialogTitle, DialogContent, TextField, DialogActions, Button } from \"@material-ui/core\";\nimport { saveLine, getLineById } from \"../../../services/api/ConfigService\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ModalLine = props => {\n  _s();\n\n  const {\n    isOpen,\n    handleClose,\n    lineId\n  } = props;\n  const [line, setLine] = useState({\n    Id: 0,\n    Name: ''\n  });\n  useEffect(() => {\n    getLineById(lineId).then(response => {\n      setLine(response.data);\n    });\n  }, [lineId]);\n\n  const saveLocalLine = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setLine(last => ({ ...last,\n      [name]: value\n    }));\n  };\n\n  const sendLocalLine = () => {\n    saveLine(line).then(response => {\n      console.log(response);\n      handleClose();\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(Dialog, {\n    open: isOpen,\n    onClose: handleClose,\n    \"aria-labelledby\": \"form-dialog-title\",\n    children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n      id: \"form-dialog-title\",\n      children: [\" \", lineId > 0 ? ' Editar ' : 'Nueva Linea', \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 14\n    }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n      children: /*#__PURE__*/_jsxDEV(TextField, {\n        autoFocus: true,\n        fullWidth: true,\n        margin: \"dense\",\n        name: \"Name\",\n        type: \"text\",\n        label: \"Descripci\\xF3n\",\n        variant: \"outlined\",\n        value: line.Name,\n        onChange: saveLocalLine\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        onClick: handleClose,\n        color: \"primary\",\n        children: \"Cerrar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: sendLocalLine,\n        color: \"primary\",\n        children: \" Guardar  \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ModalLine, \"XUnsA+yb3TD9JFZxZuZjUyOlYFQ=\");\n\n_c = ModalLine;\nexport default ModalLine;\n\nvar _c;\n\n$RefreshReg$(_c, \"ModalLine\");","map":{"version":3,"sources":["/Users/danielcr/Documents/GitHub/Biossay/GstFront/biossay-webapp/src/components/configuration/components/modalLine.js"],"names":["React","useState","useEffect","Dialog","DialogTitle","DialogContent","TextField","DialogActions","Button","saveLine","getLineById","ModalLine","props","isOpen","handleClose","lineId","line","setLine","Id","Name","then","response","data","saveLocalLine","e","name","value","target","last","sendLocalLine","console","log"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAAQC,MAAR,EAAeC,WAAf,EAA2BC,aAA3B,EAAyCC,SAAzC,EAAmDC,aAAnD,EAAiEC,MAAjE,QAA8E,mBAA9E;AACA,SAASC,QAAT,EAAkBC,WAAlB,QAAqC,qCAArC;;;AAGA,MAAMC,SAAS,GAAIC,KAAD,IAAS;AAAA;;AAC3B,QAAM;AAAEC,IAAAA,MAAF;AAAUC,IAAAA,WAAV;AAAuBC,IAAAA;AAAvB,MAAkCH,KAAxC;AACA,QAAM,CAAEI,IAAF,EAAQC,OAAR,IAAmBhB,QAAQ,CAAC;AAChCiB,IAAAA,EAAE,EAAG,CAD2B;AAEhCC,IAAAA,IAAI,EAAG;AAFyB,GAAD,CAAjC;AAKAjB,EAAAA,SAAS,CAAC,MAAM;AACdQ,IAAAA,WAAW,CAACK,MAAD,CAAX,CAAoBK,IAApB,CAAyBC,QAAQ,IAAG;AAClCJ,MAAAA,OAAO,CAACI,QAAQ,CAACC,IAAV,CAAP;AACD,KAFD;AAGD,GAJQ,EAIN,CAACP,MAAD,CAJM,CAAT;;AAMA,QAAMQ,aAAa,GAAGC,CAAD,IAAK;AACxB,UAAM;AAAEC,MAAAA,IAAF;AAAQC,MAAAA;AAAR,QAAiBF,CAAC,CAACG,MAAzB;AACAV,IAAAA,OAAO,CAAEW,IAAD,KAAS,EACf,GAAGA,IADY;AAEf,OAACH,IAAD,GAASC;AAFM,KAAT,CAAD,CAAP;AAID,GAND;;AAQA,QAAMG,aAAa,GAAG,MAAI;AACxBpB,IAAAA,QAAQ,CAACO,IAAD,CAAR,CAAeI,IAAf,CAAoBC,QAAQ,IAAG;AAC7BS,MAAAA,OAAO,CAACC,GAAR,CAAYV,QAAZ;AACAP,MAAAA,WAAW;AACZ,KAHD;AAID,GALD;;AAQI,sBACI,QAAC,MAAD;AAAQ,IAAA,IAAI,EAAED,MAAd;AAAsB,IAAA,OAAO,EAAEC,WAA/B;AAA4C,uBAAgB,mBAA5D;AAAA,4BACK,QAAC,WAAD;AAAa,MAAA,EAAE,EAAC,mBAAhB;AAAA,sBAAwCC,MAAM,GAAG,CAAT,GAAa,UAAb,GAAyB,aAAjE;AAAA;AAAA;AAAA;AAAA;AAAA,YADL,eAEA,QAAC,aAAD;AAAA,6BACE,QAAC,SAAD;AACE,QAAA,SAAS,MADX;AAEE,QAAA,SAAS,MAFX;AAGE,QAAA,MAAM,EAAC,OAHT;AAIE,QAAA,IAAI,EAAC,MAJP;AAKE,QAAA,IAAI,EAAC,MALP;AAKa,QAAA,KAAK,EAAC,gBALnB;AAKiC,QAAA,OAAO,EAAC,UALzC;AAME,QAAA,KAAK,EAAEC,IAAI,CAACG,IANd;AAOE,QAAA,QAAQ,EAAEI;AAPZ;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAFA,eAaA,QAAC,aAAD;AAAA,8BACE,QAAC,MAAD;AAAQ,QAAA,OAAO,EAAET,WAAjB;AAA8B,QAAA,KAAK,EAAC,SAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,MAAD;AAAQ,QAAA,OAAO,EAAEe,aAAjB;AAAgC,QAAA,KAAK,EAAC,SAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YAbA;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAoBH,CAjDD;;GAAMlB,S;;KAAAA,S;AAkDN,eAAeA,SAAf","sourcesContent":["import React, { useState ,useEffect } from \"react\";\nimport {Dialog,DialogTitle,DialogContent,TextField,DialogActions,Button} from \"@material-ui/core\";\nimport { saveLine,getLineById } from \"../../../services/api/ConfigService\";\n\n\nconst ModalLine = (props)=>{\nconst { isOpen, handleClose ,lineId } = props;\nconst [ line, setLine] = useState({ \n  Id : 0,\n  Name : ''\n});\n\nuseEffect(() => {\n  getLineById(lineId).then(response =>{\n    setLine(response.data);\n  });\n}, [lineId])\n\nconst saveLocalLine =(e)=>{\n  const { name, value} = e.target;\n  setLine((last)=>({\n    ...last,\n    [name] : value\n  }));\n}\n\nconst sendLocalLine = ()=>{\n  saveLine(line).then(response =>{\n    console.log(response);\n    handleClose();\n  })\n}\n\n\n    return(\n        <Dialog open={isOpen} onClose={handleClose} aria-labelledby=\"form-dialog-title\">\n             <DialogTitle id=\"form-dialog-title\"> { (lineId > 0 ? ' Editar ': 'Nueva Linea')} </DialogTitle>\n        <DialogContent>\n          <TextField\n            autoFocus\n            fullWidth\n            margin=\"dense\" \n            name=\"Name\"\n            type=\"text\"label=\"DescripciÃ³n\" variant=\"outlined\"\n            value={line.Name} \n            onChange={saveLocalLine}\n          />\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleClose} color=\"primary\">Cerrar</Button>\n          <Button onClick={sendLocalLine} color=\"primary\"> Guardar  </Button>\n        </DialogActions>\n        </Dialog>\n    )\n}\nexport default ModalLine;"]},"metadata":{},"sourceType":"module"}