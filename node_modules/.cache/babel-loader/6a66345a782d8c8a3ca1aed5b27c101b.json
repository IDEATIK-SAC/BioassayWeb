{"ast":null,"code":"var _jsxFileName = \"/Users/danielcr/Documents/GitHub/Biossay/GstFront/biossay-webapp/src/components/configuration/Branch.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { Container, Grid, Button, Typography, FormControl, Select, MenuItem } from \"@material-ui/core\";\nimport { DataGrid } from '@material-ui/data-grid';\nimport ModalBranch from \"./components/modalBranch\";\nimport { getLines, getBranchByLine, deleteBranch, getBranchById } from \"../../services/api/ConfigService\";\nimport swal from 'sweetalert';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst BranchConfig = () => {\n  _s();\n\n  const [lines, setLines] = useState([]);\n  const [lineid, setLineId] = useState(0);\n  const [branchid, setBranchId] = useState(0);\n  const [rows, setRows] = useState([]);\n  const [openLine, setOpenLine] = useState(false);\n\n  const handleOpenLine = () => {\n    setOpenLine(!openLine);\n  };\n\n  useEffect(() => {\n    getLines().then(response => {\n      setLines(response.data);\n    });\n  }, [openLine]);\n  const columns = [{\n    field: 'id',\n    headerName: 'ID',\n    width: 90\n  }, {\n    field: 'name',\n    headerName: 'Descripción',\n    width: 250\n  }, {\n    field: 'edit',\n    headerName: 'Editar',\n    width: 160,\n    renderCell: params => /*#__PURE__*/_jsxDEV(\"strong\", {\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        size: \"small\",\n        color: \"secondary\",\n        style: {\n          marginLeft: 16\n        },\n        onClick: handleOpenLine,\n        children: \" Editar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 17\n    }, this)\n  }, {\n    field: 'edit',\n    headerName: 'Editar',\n    width: 160,\n    renderCell: params => /*#__PURE__*/_jsxDEV(\"strong\", {\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        size: \"small\",\n        color: \"secondary\",\n        style: {\n          marginLeft: 16,\n          backgroundColor: \"red\"\n        },\n        onClick: DeleteBranchServer,\n        children: \" Eliminar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 17\n    }, this)\n  }];\n\n  const DeleteBranchServer = () => {\n    getBranchById(branchid).then(response => {\n      if (response.data != null) {\n        deleteBranch(response.data).then(response => {\n          swal(\"Buen trabajo!\", \"La marca a sido eliminada con éxito\", \"success\").then(() => {\n            getLines().then(response => {\n              setLines(response.data);\n            });\n          });\n        });\n      }\n    });\n  };\n\n  const onclickbutton = () => {\n    setBranchId(0);\n    handleOpenLine();\n  };\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    maxWidth: true,\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 2,\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        children: /*#__PURE__*/_jsxDEV(Typography, {\n          style: {\n            textAlign: \"center\"\n          },\n          variant: 'h3',\n          children: \" Marcas\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 8,\n        children: /*#__PURE__*/_jsxDEV(FormControl, {\n          fullWidth: true,\n          variant: \"outlined\",\n          children: /*#__PURE__*/_jsxDEV(Select, {\n            fullWidth: true,\n            label: \"Linea\",\n            name: \"lineid\",\n            value: lineid || 0,\n            onChange: e => {\n              const lineid = e.target.value;\n              setLineId(lineid);\n              getBranchByLine(lineid).then(response => {\n                setRows(response.data);\n              });\n            },\n            children: [/*#__PURE__*/_jsxDEV(MenuItem, {\n              value: \"0\",\n              children: /*#__PURE__*/_jsxDEV(\"em\", {\n                children: \"Seleccione\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 101,\n                columnNumber: 29\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 100,\n              columnNumber: 25\n            }, this), lines.map(n => /*#__PURE__*/_jsxDEV(MenuItem, {\n              value: n.id,\n              children: n.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 104,\n              columnNumber: 27\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 2,\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          fullWidth: true,\n          variant: \"contained\",\n          children: \"Buscar\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 2,\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          onClick: onclickbutton,\n          fullWidth: true,\n          variant: \"contained\",\n          children: \"Nuevo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(ModalBranch, {\n          isOpen: openLine,\n          handleClose: handleOpenLine,\n          branchid: branchid\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            height: 400,\n            width: '100%'\n          },\n          children: /*#__PURE__*/_jsxDEV(DataGrid, {\n            rows: rows,\n            columns: columns,\n            pageSize: 5,\n            onSelectionModelChange: newselection => {\n              setBranchId(newselection.selectionModel[0]);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 9\n  }, this);\n};\n\n_s(BranchConfig, \"wh0aE0nH85rUBJuOjfE5QgGLN9Y=\");\n\n_c = BranchConfig;\nexport default BranchConfig;\n\nvar _c;\n\n$RefreshReg$(_c, \"BranchConfig\");","map":{"version":3,"sources":["/Users/danielcr/Documents/GitHub/Biossay/GstFront/biossay-webapp/src/components/configuration/Branch.js"],"names":["React","useState","useEffect","Container","Grid","Button","Typography","FormControl","Select","MenuItem","DataGrid","ModalBranch","getLines","getBranchByLine","deleteBranch","getBranchById","swal","BranchConfig","lines","setLines","lineid","setLineId","branchid","setBranchId","rows","setRows","openLine","setOpenLine","handleOpenLine","then","response","data","columns","field","headerName","width","renderCell","params","marginLeft","backgroundColor","DeleteBranchServer","onclickbutton","textAlign","e","target","value","map","n","id","name","height","newselection","selectionModel"],"mappings":"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","sourcesContent":["import React, { useState,useEffect } from \"react\";\nimport { Container, Grid , Button, Typography  ,FormControl,Select,MenuItem} from \"@material-ui/core\";\nimport { DataGrid } from '@material-ui/data-grid';\nimport ModalBranch from \"./components/modalBranch\";\nimport { getLines,getBranchByLine,deleteBranch,getBranchById } from \"../../services/api/ConfigService\";\nimport swal from 'sweetalert';\n\nconst BranchConfig =()=>{\nconst [ lines, setLines] = useState([]);\nconst [ lineid, setLineId ] = useState(0);\nconst [ branchid, setBranchId ] = useState(0);\nconst [ rows, setRows ] = useState([]);\n\nconst [ openLine, setOpenLine ] = useState(false);\nconst handleOpenLine =()=>{\n  setOpenLine(!openLine);\n}\n\nuseEffect(() => { \n    getLines().then(response =>{\n        setLines(response.data);\n    });\n}, [openLine])\n\n    const columns = [\n        { field: 'id', headerName: 'ID', width: 90 },\n        { field: 'name', headerName: 'Descripción', width: 250},\n        { field: 'edit', headerName: 'Editar', width: 160,\n            renderCell: (params) => (\n                <strong>\n                    <Button\n                        variant=\"contained\"\n                        size=\"small\"\n                        color=\"secondary\"\n                        style={{ marginLeft: 16 }}\n                        onClick={handleOpenLine} \n                    > Editar\n                  </Button>\n                </strong>\n            ),\n        },\n        { field: 'edit', headerName: 'Editar', width: 160,\n            renderCell: (params) => (\n                <strong>\n                    <Button\n                        variant=\"contained\"\n                        size=\"small\"\n                        color=\"secondary\"\n                        style={{ marginLeft: 16, backgroundColor:\"red\" }}\n                        onClick={DeleteBranchServer} \n                    > Eliminar\n                  </Button>\n                </strong>\n            ),\n        }\n      ];\n      \n      const DeleteBranchServer = () =>{\n        getBranchById(branchid).then(response => {\n            if(response.data != null){\n                deleteBranch(response.data).then(response => {\n                    swal(\"Buen trabajo!\", \"La marca a sido eliminada con éxito\", \"success\")\n                            .then(() => { \n                                getLines().then(response =>{\n                                    setLines(response.data);\n                                });\n                            });\n                });\n            }\n        });\n      }\n     \n\n      const onclickbutton =()=>{\n        setBranchId(0);\n        handleOpenLine();\n      }\n\n    return(\n        <Container maxWidth>\n            <Grid container spacing={2}>\n                <Grid item xs={12}>\n                <Typography style={{textAlign :\"center\"}} variant={'h3'}> Marcas</Typography>\n                </Grid>\n                <Grid item xs={8}>\n                <FormControl fullWidth variant=\"outlined\"  > \n                    <Select \n                        fullWidth\n                        label=\"Linea\"\n                        name=\"lineid\"\n                        value={lineid || 0}\n                        onChange={(e =>{\n                            const lineid = e.target.value;\n                            setLineId(lineid);\n                            getBranchByLine(lineid).then(response =>{\n                                setRows(response.data);\n                            })\n                        })}\n                        >\n                        <MenuItem value=\"0\">\n                            <em>Seleccione</em>\n                        </MenuItem>\n                        {(lines.map((n) => \n                          <MenuItem value={n.id}>{n.name}</MenuItem>\n                        ))}\n                      </Select>\n                    \n                    </FormControl>\n\n                </Grid>\n                <Grid item xs={2}>\n                    <Button  fullWidth variant=\"contained\">Buscar</Button>\n                </Grid>\n                <Grid item xs={2}>\n                    <Button onClick={onclickbutton} fullWidth variant=\"contained\">Nuevo</Button>\n                    <ModalBranch isOpen={openLine} handleClose={handleOpenLine} branchid={branchid} />\n                </Grid>\n                <Grid item xs={12}>\n                <div style={{ height: 400, width: '100%' }}>\n                    <DataGrid\n                        rows={rows}\n                        columns={columns}\n                        pageSize={5}\n                        onSelectionModelChange={(newselection) =>{\n                            setBranchId(newselection.selectionModel[0]);\n                        }}  \n                    />\n                    </div>\n                  </Grid>\n            </Grid>\n        </Container>\n    );\n}\n\nexport default BranchConfig;"]},"metadata":{},"sourceType":"module"}