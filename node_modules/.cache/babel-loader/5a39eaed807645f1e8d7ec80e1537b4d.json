{"ast":null,"code":"import HttpClient from\"../HttpClient\";export var saveBranch=function saveBranch(model){return new Promise(function(resolve,reject){HttpClient.post('/RequestDocument/SaveBranch',model).then(function(response){resolve(response);}).catch(function(error){resolve(error.response);});});};export var saveLine=function saveLine(model){return new Promise(function(resolve,reject){HttpClient.post('/RequestDocument/SaveLine',model).then(function(response){resolve(response);}).catch(function(error){resolve(error.response);});});};export var saveModelLine=function saveModelLine(model){return new Promise(function(resolve,reject){HttpClient.post('/RequestDocument/SaveModelLine',model).then(function(response){resolve(response);}).catch(function(error){resolve(error.response);});});};export var getLineById=function getLineById(id){return new Promise(function(resolve,reject){HttpClient.get('/RequestDocument/GetLineById?lineid='+id).then(function(response){resolve(response);}).catch(function(error){resolve(error.response);});});};export var getLines=function getLines(){return new Promise(function(resolve,reject){HttpClient.get('/RequestDocument/GetLines').then(function(response){resolve(response);}).catch(function(error){resolve(error.response);});});};export var getBranchById=function getBranchById(id){return new Promise(function(resolve,reject){HttpClient.get('/RequestDocument/GetBranchById?branchid='+id).then(function(response){resolve(response);}).catch(function(error){resolve(error.response);});});};export var getBranches=function getBranches(id){return new Promise(function(resolve,reject){HttpClient.get('/RequestDocument/GetBranches').then(function(response){resolve(response);}).catch(function(error){resolve(error.response);});});};export var getBranchByLine=function getBranchByLine(lineid){return new Promise(function(resolve,reject){HttpClient.get('/RequestDocument/GetBranchByLine?lineid='+lineid).then(function(response){resolve(response);}).catch(function(error){resolve(error.response);});});};export var getModelLineById=function getModelLineById(id){return new Promise(function(resolve,reject){HttpClient.get('/RequestDocument/GetModelLineById?modelid='+id).then(function(response){resolve(response);}).catch(function(error){resolve(error.response);});});};export var getModelLinesByBranch=function getModelLinesByBranch(branchid){return new Promise(function(resolve,reject){HttpClient.get('/RequestDocument/GetModelLinesByBranch?branchid='+branchid).then(function(response){resolve(response);}).catch(function(error){resolve(error.response);});});};","map":{"version":3,"sources":["/Users/danielcr/Documents/GitHub/Biossay/GstFront/biossay-webapp/src/services/api/ConfigService.js"],"names":["HttpClient","saveBranch","model","Promise","resolve","reject","post","then","response","catch","error","saveLine","saveModelLine","getLineById","id","get","getLines","getBranchById","getBranches","getBranchByLine","lineid","getModelLineById","getModelLinesByBranch","branchid"],"mappings":"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","sourcesContent":["import HttpClient from \"../HttpClient\";\n\nexport const saveBranch = (model) =>{ \n    return new Promise((resolve, reject) => {\n        HttpClient.post('/RequestDocument/SaveBranch' , model).then(response => {\n            resolve(response);\n        }).catch(error => {\n            resolve(error.response);\n        })\n    })\n}\nexport const saveLine = (model) =>{ \n    return new Promise((resolve, reject) => {\n        HttpClient.post('/RequestDocument/SaveLine' , model).then(response => {\n            resolve(response);\n        }).catch(error => {\n            resolve(error.response);\n        })\n    })\n}\nexport const saveModelLine = (model) =>{ \n    return new Promise((resolve, reject) => {\n        HttpClient.post('/RequestDocument/SaveModelLine' , model).then(response => {\n            resolve(response);\n        }).catch(error => {\n            resolve(error.response);\n        })\n    })\n}\n\nexport const getLineById =(id)=> {\n    return new Promise((resolve, reject) => {\n         HttpClient.get('/RequestDocument/GetLineById?lineid='+ id).then(response => {\n             resolve(response);\n         }).catch(error => {\n             resolve(error.response);\n         })\n     })\n }\n\n export const getLines =()=> {\n    return new Promise((resolve, reject) => {\n         HttpClient.get('/RequestDocument/GetLines').then(response => {\n             resolve(response);\n         }).catch(error => {\n             resolve(error.response);\n         })\n     })\n }\n\n\nexport const getBranchById =(id)=> {\n    return new Promise((resolve, reject) => {\n         HttpClient.get('/RequestDocument/GetBranchById?branchid='+ id).then(response => {\n             resolve(response);\n         }).catch(error => {\n             resolve(error.response);\n         })\n     })\n }\n\n export const getBranches =(id)=> {\n    return new Promise((resolve, reject) => {\n         HttpClient.get('/RequestDocument/GetBranches').then(response => {\n             resolve(response);\n         }).catch(error => {\n             resolve(error.response);\n         })\n     })\n }\n\n export const getBranchByLine =(lineid)=> {\n    return new Promise((resolve, reject) => {\n         HttpClient.get('/RequestDocument/GetBranchByLine?lineid='+lineid).then(response => {\n             resolve(response);\n         }).catch(error => {\n             resolve(error.response);\n         })\n     })\n }\n\n export const getModelLineById =(id)=> {\n    return new Promise((resolve, reject) => {\n         HttpClient.get('/RequestDocument/GetModelLineById?modelid='+ id).then(response => {\n             resolve(response);\n         }).catch(error => {\n             resolve(error.response);\n         })\n     })\n }\n\n export const getModelLinesByBranch =(branchid)=> {\n    return new Promise((resolve, reject) => {\n         HttpClient.get('/RequestDocument/GetModelLinesByBranch?branchid='+branchid).then(response => {\n             resolve(response);\n         }).catch(error => {\n             resolve(error.response);\n         })\n     })\n }\n"]},"metadata":{},"sourceType":"module"}