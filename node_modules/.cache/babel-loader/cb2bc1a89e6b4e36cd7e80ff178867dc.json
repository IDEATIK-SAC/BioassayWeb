{"ast":null,"code":"import HttpClient from \"../HttpClient\";\nimport axios from \"axios\";\nexport const saveClientServer = model => {\n  return new Promise((resolve, reject) => {\n    HttpClient.post('/Client/SaveClient', model).then(response => {\n      resolve(response.data);\n    }).catch(error => {\n      resolve(error.response);\n    });\n  });\n};\nexport const validateRUCClient = model => {\n  return new Promise((resolve, reject) => {\n    HttpClient.post('/Client/ValidateRUCClient', model).then(response => {\n      resolve(response.data);\n    }).catch(error => {\n      resolve(error.response);\n    });\n  });\n};\nexport const getClientById = id => {\n  return new Promise((resolve, reject) => {\n    HttpClient.get('/Client/GetClientById?id=' + id).then(response => {\n      resolve(response);\n    }).catch(error => {\n      resolve(error.response);\n    });\n  });\n};\nexport const getClientFull = () => {\n  return new Promise((resolve, reject) => {\n    HttpClient.get('/Client/GetClientFull').then(response => {\n      resolve(response);\n    }).catch(error => {\n      resolve(error.response);\n    });\n  });\n};\nexport const getClients = () => {\n  return new Promise((resolve, reject) => {\n    HttpClient.get('/Client/GetClients').then(response => {\n      resolve(response);\n    }).catch(error => {\n      resolve(error.response);\n    });\n  });\n};\nexport const getRUC = ruc => {\n  return new Promise((resolve, reject) => {\n    HttpClient.get('/Client/GetClientByRUC?id=' + ruc).then(response => {\n      resolve(response.data);\n    }).catch(error => {\n      resolve(error.response);\n    });\n  });\n};\nexport const getRUCSunat = ruc => {\n  return new Promise((resolve, reject) => {\n    HttpClient.get('/Client/GetClientrucsunat?id=' + ruc).then(response => {\n      resolve(response);\n    }).catch(error => {\n      resolve(error.response);\n    });\n  });\n};","map":{"version":3,"sources":["/Users/danielcr/Documents/GitHub/Biossay/GstFront/biossay-webapp/src/services/api/ClientService.js"],"names":["HttpClient","axios","saveClientServer","model","Promise","resolve","reject","post","then","response","data","catch","error","validateRUCClient","getClientById","id","get","getClientFull","getClients","getRUC","ruc","getRUCSunat"],"mappings":"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","sourcesContent":["import HttpClient from \"../HttpClient\";\nimport axios from \"axios\";\n\nexport const saveClientServer = (model) =>{ \n    return new Promise((resolve, reject) => {\n        HttpClient.post('/Client/SaveClient' , model).then(response => {\n            resolve(response.data);\n        }).catch(error => {\n            resolve(error.response);\n        })\n    })\n}\n\nexport const validateRUCClient = (model) =>{ \n    return new Promise((resolve, reject) => {\n        HttpClient.post('/Client/ValidateRUCClient' , model).then(response => {\n            resolve(response.data);\n        }).catch(error => {\n            resolve(error.response);\n        })\n    })\n}\n\n\nexport const getClientById =(id)=> {\n    return new Promise((resolve, reject) => {\n         HttpClient.get('/Client/GetClientById?id='+ id).then(response => {\n             resolve(response);\n         }).catch(error => {\n             resolve(error.response);\n         })\n     })\n }\n\n export const getClientFull =()=> {\n    return new Promise((resolve, reject) => {\n         HttpClient.get('/Client/GetClientFull').then(response => {\n             resolve(response);\n         }).catch(error => {\n             resolve(error.response);\n         })\n     })\n }\n\n\n export const getClients =()=> {\n    return new Promise((resolve, reject) => {\n         HttpClient.get('/Client/GetClients').then(response => {\n             resolve(response);\n         }).catch(error => {\n             resolve(error.response);\n         })\n     })\n }\n\n export const getRUC = (ruc)=>{\n    return new Promise((resolve, reject) => {\n        HttpClient.get('/Client/GetClientByRUC?id=' + ruc).then(response => {\n            resolve(response.data);\n        }).catch(error => {\n            resolve(error.response);\n        })\n    })\n }\n\n\n export const getRUCSunat = (ruc)=>{\n    return new Promise((resolve, reject) => {\n        HttpClient.get('/Client/GetClientrucsunat?id=' + ruc).then(response => {\n            resolve(response);\n        }).catch(error => {\n            resolve(error.response);\n        })\n    })\n }"]},"metadata":{},"sourceType":"module"}