{"ast":null,"code":"import HttpClient from \"../HttpClient\";\nexport const SaveReport = (model, service, finding, process, causes, recommendations, observations, operatividad) => {\n  console.log(\"operatividad\", operatividad);\n  model.ServiceTypeId = JSON.stringify(service);\n  model.Finding = JSON.stringify(finding);\n  model.ProcedureReport = JSON.stringify(process);\n  model.PossibleCauses = JSON.stringify(causes);\n  model.Recommendations = JSON.stringify(recommendations);\n  model.Observations = JSON.stringify(observations);\n  model.IdOperativity = JSON.stringify(operatividad);\n  console.log(\"model\");\n  console.log(model);\n  return new Promise((resolve, reject) => {\n    HttpClient.post('/Report/SaveReport', model).then(response => {\n      resolve(response);\n    }).catch(error => {\n      resolve(error.response);\n    });\n  });\n};\n_c = SaveReport;\nexport const GetReports = () => {\n  return new Promise((resolve, reject) => {\n    HttpClient.get('/Report/GetReports').then(response => {\n      resolve(response);\n    }).catch(error => {\n      resolve(error.response);\n    });\n  });\n};\n_c2 = GetReports;\nexport const GetReportById = id => {\n  return new Promise((resolve, reject) => {\n    HttpClient.get('/Report/GetReportById?id=' + id).then(response => {\n      resolve(response);\n    }).catch(error => {\n      resolve(error.response);\n    });\n  });\n};\n_c3 = GetReportById;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"SaveReport\");\n$RefreshReg$(_c2, \"GetReports\");\n$RefreshReg$(_c3, \"GetReportById\");","map":{"version":3,"sources":["/Users/danielcr/Documents/GitHub/Biossay/GstFront/biossay-webapp/src/services/api/ReportService.js"],"names":["HttpClient","SaveReport","model","service","finding","process","causes","recommendations","observations","operatividad","console","log","ServiceTypeId","JSON","stringify","Finding","ProcedureReport","PossibleCauses","Recommendations","Observations","IdOperativity","Promise","resolve","reject","post","then","response","catch","error","GetReports","get","GetReportById","id"],"mappings":"AAAA,OAAOA,UAAP,MAAuB,eAAvB;AAEA,OAAO,MAAMC,UAAU,GAAG,CAACC,KAAD,EAAOC,OAAP,EAAeC,OAAf,EAAuBC,OAAvB,EAA+BC,MAA/B,EAAsCC,eAAtC,EAAsDC,YAAtD,EAAmEC,YAAnE,KAAmF;AAEzGC,EAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA6BF,YAA7B;AACAP,EAAAA,KAAK,CAACU,aAAN,GAAsBC,IAAI,CAACC,SAAL,CAAeX,OAAf,CAAtB;AACAD,EAAAA,KAAK,CAACa,OAAN,GAAgBF,IAAI,CAACC,SAAL,CAAeV,OAAf,CAAhB;AACAF,EAAAA,KAAK,CAACc,eAAN,GAAwBH,IAAI,CAACC,SAAL,CAAeT,OAAf,CAAxB;AACAH,EAAAA,KAAK,CAACe,cAAN,GAAuBJ,IAAI,CAACC,SAAL,CAAeR,MAAf,CAAvB;AACAJ,EAAAA,KAAK,CAACgB,eAAN,GAAwBL,IAAI,CAACC,SAAL,CAAeP,eAAf,CAAxB;AACAL,EAAAA,KAAK,CAACiB,YAAN,GAAqBN,IAAI,CAACC,SAAL,CAAeN,YAAf,CAArB;AACAN,EAAAA,KAAK,CAACkB,aAAN,GAAsBP,IAAI,CAACC,SAAL,CAAeL,YAAf,CAAtB;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AAEAD,EAAAA,OAAO,CAACC,GAAR,CAAYT,KAAZ;AAEA,SAAO,IAAImB,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACpCvB,IAAAA,UAAU,CAACwB,IAAX,CAAgB,oBAAhB,EAAuCtB,KAAvC,EAA8CuB,IAA9C,CAAmDC,QAAQ,IAAI;AAC3DJ,MAAAA,OAAO,CAACI,QAAD,CAAP;AACH,KAFD,EAEGC,KAFH,CAESC,KAAK,IAAI;AACdN,MAAAA,OAAO,CAACM,KAAK,CAACF,QAAP,CAAP;AACH,KAJD;AAKH,GANM,CAAP;AAOH,CArBM;KAAMzB,U;AAwBb,OAAO,MAAM4B,UAAU,GAAE,MAAK;AAC1B,SAAO,IAAIR,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACnCvB,IAAAA,UAAU,CAAC8B,GAAX,CAAe,oBAAf,EAAqCL,IAArC,CAA0CC,QAAQ,IAAI;AAClDJ,MAAAA,OAAO,CAACI,QAAD,CAAP;AACH,KAFD,EAEGC,KAFH,CAESC,KAAK,IAAI;AACdN,MAAAA,OAAO,CAACM,KAAK,CAACF,QAAP,CAAP;AACH,KAJD;AAKH,GANK,CAAP;AAOF,CARK;MAAMG,U;AAUZ,OAAO,MAAME,aAAa,GAAGC,EAAD,IAAO;AAChC,SAAO,IAAIX,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACnCvB,IAAAA,UAAU,CAAC8B,GAAX,CAAe,8BAA8BE,EAA7C,EAAiDP,IAAjD,CAAsDC,QAAQ,IAAI;AAC9DJ,MAAAA,OAAO,CAACI,QAAD,CAAP;AACH,KAFD,EAEGC,KAFH,CAESC,KAAK,IAAI;AACdN,MAAAA,OAAO,CAACM,KAAK,CAACF,QAAP,CAAP;AACH,KAJD;AAKH,GANK,CAAP;AAOF,CARM;MAAMK,a","sourcesContent":["import HttpClient from \"../HttpClient\";\n\nexport const SaveReport = (model,service,finding,process,causes,recommendations,observations,operatividad) =>{\n\n    console.log(\"operatividad\" , operatividad);\n    model.ServiceTypeId = JSON.stringify(service);\n    model.Finding = JSON.stringify(finding);\n    model.ProcedureReport = JSON.stringify(process);\n    model.PossibleCauses = JSON.stringify(causes);\n    model.Recommendations = JSON.stringify(recommendations);\n    model.Observations = JSON.stringify(observations);\n    model.IdOperativity = JSON.stringify(operatividad);\n    console.log(\"model\");\n\n    console.log(model);\n\n    return new Promise((resolve, reject) => {\n        HttpClient.post('/Report/SaveReport' , model).then(response => {\n            resolve(response);\n        }).catch(error => {\n            resolve(error.response);\n        })\n    })\n}\n\n\nexport const GetReports =()=> {\n    return new Promise((resolve, reject) => {\n         HttpClient.get('/Report/GetReports').then(response => {\n             resolve(response);\n         }).catch(error => {\n             resolve(error.response);\n         })\n     })\n }\n\n export const GetReportById =(id)=> {\n    return new Promise((resolve, reject) => {\n         HttpClient.get('/Report/GetReportById?id=' + id).then(response => {\n             resolve(response);\n         }).catch(error => {\n             resolve(error.response);\n         })\n     })\n }"]},"metadata":{},"sourceType":"module"}