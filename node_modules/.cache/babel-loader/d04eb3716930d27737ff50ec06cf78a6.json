{"ast":null,"code":"import HttpClient from\"../HttpClient\";export var SaveReport=function SaveReport(model,service,finding,process,causes,recommendations,observations,operatividad){console.log(\"operatividad\",operatividad);model.ServiceTypeId=JSON.stringify(service);model.Finding=JSON.stringify(finding);model.ProcedureReport=JSON.stringify(process);model.PossibleCauses=JSON.stringify(causes);model.Recommendations=JSON.stringify(recommendations);model.Observations=JSON.stringify(observations);model.IdOperativity=JSON.stringify(operatividad);console.log(\"model\");console.log(model);return new Promise(function(resolve,reject){HttpClient.post('/Report/SaveReport',model).then(function(response){resolve(response);}).catch(function(error){resolve(error.response);});});};export var GetReports=function GetReports(){return new Promise(function(resolve,reject){HttpClient.get('/Report/GetReports').then(function(response){resolve(response);}).catch(function(error){resolve(error.response);});});};export var GetReportById=function GetReportById(id){return new Promise(function(resolve,reject){HttpClient.get('/Report/GetReportById?id='+id).then(function(response){resolve(response);}).catch(function(error){resolve(error.response);});});};","map":{"version":3,"sources":["/Users/danielcr/Documents/GitHub/Biossay/GstFront/biossay-webapp/src/services/api/ReportService.js"],"names":["HttpClient","SaveReport","model","service","finding","process","causes","recommendations","observations","operatividad","console","log","ServiceTypeId","JSON","stringify","Finding","ProcedureReport","PossibleCauses","Recommendations","Observations","IdOperativity","Promise","resolve","reject","post","then","response","catch","error","GetReports","get","GetReportById","id"],"mappings":"AAAA,MAAOA,CAAAA,UAAP,KAAuB,eAAvB,CAEA,MAAO,IAAMC,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,CAACC,KAAD,CAAOC,OAAP,CAAeC,OAAf,CAAuBC,OAAvB,CAA+BC,MAA/B,CAAsCC,eAAtC,CAAsDC,YAAtD,CAAmEC,YAAnE,CAAmF,CAEzGC,OAAO,CAACC,GAAR,CAAY,cAAZ,CAA6BF,YAA7B,EACAP,KAAK,CAACU,aAAN,CAAsBC,IAAI,CAACC,SAAL,CAAeX,OAAf,CAAtB,CACAD,KAAK,CAACa,OAAN,CAAgBF,IAAI,CAACC,SAAL,CAAeV,OAAf,CAAhB,CACAF,KAAK,CAACc,eAAN,CAAwBH,IAAI,CAACC,SAAL,CAAeT,OAAf,CAAxB,CACAH,KAAK,CAACe,cAAN,CAAuBJ,IAAI,CAACC,SAAL,CAAeR,MAAf,CAAvB,CACAJ,KAAK,CAACgB,eAAN,CAAwBL,IAAI,CAACC,SAAL,CAAeP,eAAf,CAAxB,CACAL,KAAK,CAACiB,YAAN,CAAqBN,IAAI,CAACC,SAAL,CAAeN,YAAf,CAArB,CACAN,KAAK,CAACkB,aAAN,CAAsBP,IAAI,CAACC,SAAL,CAAeL,YAAf,CAAtB,CACAC,OAAO,CAACC,GAAR,CAAY,OAAZ,EAEAD,OAAO,CAACC,GAAR,CAAYT,KAAZ,EAEA,MAAO,IAAImB,CAAAA,OAAJ,CAAY,SAACC,OAAD,CAAUC,MAAV,CAAqB,CACpCvB,UAAU,CAACwB,IAAX,CAAgB,oBAAhB,CAAuCtB,KAAvC,EAA8CuB,IAA9C,CAAmD,SAAAC,QAAQ,CAAI,CAC3DJ,OAAO,CAACI,QAAD,CAAP,CACH,CAFD,EAEGC,KAFH,CAES,SAAAC,KAAK,CAAI,CACdN,OAAO,CAACM,KAAK,CAACF,QAAP,CAAP,CACH,CAJD,EAKH,CANM,CAAP,CAOH,CArBM,CAwBP,MAAO,IAAMG,CAAAA,UAAU,CAAE,QAAZA,CAAAA,UAAY,EAAK,CAC1B,MAAO,IAAIR,CAAAA,OAAJ,CAAY,SAACC,OAAD,CAAUC,MAAV,CAAqB,CACnCvB,UAAU,CAAC8B,GAAX,CAAe,oBAAf,EAAqCL,IAArC,CAA0C,SAAAC,QAAQ,CAAI,CAClDJ,OAAO,CAACI,QAAD,CAAP,CACH,CAFD,EAEGC,KAFH,CAES,SAAAC,KAAK,CAAI,CACdN,OAAO,CAACM,KAAK,CAACF,QAAP,CAAP,CACH,CAJD,EAKH,CANK,CAAP,CAOF,CARK,CAUN,MAAO,IAAMK,CAAAA,aAAa,CAAE,QAAfA,CAAAA,aAAe,CAACC,EAAD,CAAO,CAChC,MAAO,IAAIX,CAAAA,OAAJ,CAAY,SAACC,OAAD,CAAUC,MAAV,CAAqB,CACnCvB,UAAU,CAAC8B,GAAX,CAAe,4BAA8BE,EAA7C,EAAiDP,IAAjD,CAAsD,SAAAC,QAAQ,CAAI,CAC9DJ,OAAO,CAACI,QAAD,CAAP,CACH,CAFD,EAEGC,KAFH,CAES,SAAAC,KAAK,CAAI,CACdN,OAAO,CAACM,KAAK,CAACF,QAAP,CAAP,CACH,CAJD,EAKH,CANK,CAAP,CAOF,CARM","sourcesContent":["import HttpClient from \"../HttpClient\";\n\nexport const SaveReport = (model,service,finding,process,causes,recommendations,observations,operatividad) =>{\n\n    console.log(\"operatividad\" , operatividad);\n    model.ServiceTypeId = JSON.stringify(service);\n    model.Finding = JSON.stringify(finding);\n    model.ProcedureReport = JSON.stringify(process);\n    model.PossibleCauses = JSON.stringify(causes);\n    model.Recommendations = JSON.stringify(recommendations);\n    model.Observations = JSON.stringify(observations);\n    model.IdOperativity = JSON.stringify(operatividad);\n    console.log(\"model\");\n\n    console.log(model);\n\n    return new Promise((resolve, reject) => {\n        HttpClient.post('/Report/SaveReport' , model).then(response => {\n            resolve(response);\n        }).catch(error => {\n            resolve(error.response);\n        })\n    })\n}\n\n\nexport const GetReports =()=> {\n    return new Promise((resolve, reject) => {\n         HttpClient.get('/Report/GetReports').then(response => {\n             resolve(response);\n         }).catch(error => {\n             resolve(error.response);\n         })\n     })\n }\n\n export const GetReportById =(id)=> {\n    return new Promise((resolve, reject) => {\n         HttpClient.get('/Report/GetReportById?id=' + id).then(response => {\n             resolve(response);\n         }).catch(error => {\n             resolve(error.response);\n         })\n     })\n }"]},"metadata":{},"sourceType":"module"}