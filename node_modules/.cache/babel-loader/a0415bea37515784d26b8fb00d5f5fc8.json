{"ast":null,"code":"import HttpClient from \"../HttpClient\";\nexport const saveClientServer = model => {\n  return new Promise((resolve, reject) => {\n    HttpClient.post('/Client/SaveClient', model).then(response => {\n      resolve(response);\n    }).catch(error => {\n      resolve(error.response);\n    });\n  });\n};\nexport const getClientById = id => {\n  return new Promise((resolve, reject) => {\n    HttpClient.get('/Client/GetClientById?id=' + id).then(response => {\n      resolve(response);\n    }).catch(error => {\n      resolve(error.response);\n    });\n  });\n};\nexport const getClients = () => {\n  return new Promise((resolve, reject) => {\n    HttpClient.get('/Client/GetClients').then(response => {\n      resolve(response);\n    }).catch(error => {\n      resolve(error.response);\n    });\n  });\n};\nexport const getRUC = ruc => {\n  const requestOptions = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      token: '303144d4-680b-4930-88d5-6e3bc7060099-3f424b51-8da6-4935-a213-81b4a655c23c',\n      ruc: ruc\n    })\n  };\n  return new Promise((resolve, reject) => {\n    fetch('https://ruc.com.pe/api/v1/consultas', requestOptions).then(response => response.json()).then(data => resolve(data));\n  });\n};","map":{"version":3,"sources":["/Users/danielcr/Documents/GitHub/Biossay/GstFront/biossay-webapp/src/services/api/ClientService.js"],"names":["HttpClient","saveClientServer","model","Promise","resolve","reject","post","then","response","catch","error","getClientById","id","get","getClients","getRUC","ruc","requestOptions","method","headers","body","JSON","stringify","token","fetch","json","data"],"mappings":"AAAA,OAAOA,UAAP,MAAuB,eAAvB;AAEA,OAAO,MAAMC,gBAAgB,GAAIC,KAAD,IAAU;AACtC,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACpCL,IAAAA,UAAU,CAACM,IAAX,CAAgB,oBAAhB,EAAuCJ,KAAvC,EAA8CK,IAA9C,CAAmDC,QAAQ,IAAI;AAC3DJ,MAAAA,OAAO,CAACI,QAAD,CAAP;AACH,KAFD,EAEGC,KAFH,CAESC,KAAK,IAAI;AACdN,MAAAA,OAAO,CAACM,KAAK,CAACF,QAAP,CAAP;AACH,KAJD;AAKH,GANM,CAAP;AAOH,CARM;AAUP,OAAO,MAAMG,aAAa,GAAGC,EAAD,IAAO;AAC/B,SAAO,IAAIT,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACnCL,IAAAA,UAAU,CAACa,GAAX,CAAe,8BAA6BD,EAA5C,EAAgDL,IAAhD,CAAqDC,QAAQ,IAAI;AAC7DJ,MAAAA,OAAO,CAACI,QAAD,CAAP;AACH,KAFD,EAEGC,KAFH,CAESC,KAAK,IAAI;AACdN,MAAAA,OAAO,CAACM,KAAK,CAACF,QAAP,CAAP;AACH,KAJD;AAKH,GANK,CAAP;AAOF,CARK;AAUN,OAAO,MAAMM,UAAU,GAAE,MAAK;AAC3B,SAAO,IAAIX,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACnCL,IAAAA,UAAU,CAACa,GAAX,CAAe,oBAAf,EAAqCN,IAArC,CAA0CC,QAAQ,IAAI;AAClDJ,MAAAA,OAAO,CAACI,QAAD,CAAP;AACH,KAFD,EAEGC,KAFH,CAESC,KAAK,IAAI;AACdN,MAAAA,OAAO,CAACM,KAAK,CAACF,QAAP,CAAP;AACH,KAJD;AAKH,GANK,CAAP;AAOF,CARM;AAUP,OAAO,MAAMO,MAAM,GAAIC,GAAD,IAAO;AAC1B,QAAMC,cAAc,GAAG;AACnBC,IAAAA,MAAM,EAAE,MADW;AAEnBC,IAAAA,OAAO,EAAE;AAAE,sBAAgB;AAAlB,KAFU;AAGnBC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEC,MAAAA,KAAK,EAAE,2EAAT;AAAsFP,MAAAA,GAAG,EAAEA;AAA3F,KAAf;AAHa,GAAvB;AAKA,SAAO,IAAIb,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACpCmB,IAAAA,KAAK,CAAC,qCAAD,EAAwCP,cAAxC,CAAL,CACCV,IADD,CACMC,QAAQ,IAAIA,QAAQ,CAACiB,IAAT,EADlB,EAEClB,IAFD,CAEMmB,IAAI,IAAItB,OAAO,CAACsB,IAAD,CAFrB;AAGH,GAJM,CAAP;AAMF,CAZM","sourcesContent":["import HttpClient from \"../HttpClient\";\n\nexport const saveClientServer = (model) =>{ \n    return new Promise((resolve, reject) => {\n        HttpClient.post('/Client/SaveClient' , model).then(response => {\n            resolve(response);\n        }).catch(error => {\n            resolve(error.response);\n        })\n    })\n}\n\nexport const getClientById =(id)=> {\n    return new Promise((resolve, reject) => {\n         HttpClient.get('/Client/GetClientById?id='+ id).then(response => {\n             resolve(response);\n         }).catch(error => {\n             resolve(error.response);\n         })\n     })\n }\n\n export const getClients =()=> {\n    return new Promise((resolve, reject) => {\n         HttpClient.get('/Client/GetClients').then(response => {\n             resolve(response);\n         }).catch(error => {\n             resolve(error.response);\n         })\n     })\n }\n\n export const getRUC = (ruc)=>{\n    const requestOptions = {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ token: '303144d4-680b-4930-88d5-6e3bc7060099-3f424b51-8da6-4935-a213-81b4a655c23c', ruc: ruc })\n    };\n    return new Promise((resolve, reject) => {\n        fetch('https://ruc.com.pe/api/v1/consultas', requestOptions)\n        .then(response => response.json())\n        .then(data => resolve(data));\n    });\n  \n }"]},"metadata":{},"sourceType":"module"}