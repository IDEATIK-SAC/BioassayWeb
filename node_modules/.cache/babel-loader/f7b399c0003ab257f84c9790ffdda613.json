{"ast":null,"code":"import _defineProperty from\"/Users/danielcr/Documents/GitHub/Biossay/GstFront/biossay-webapp/node_modules/@babel/runtime/helpers/esm/defineProperty\";import _objectSpread from\"/Users/danielcr/Documents/GitHub/Biossay/GstFront/biossay-webapp/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"/Users/danielcr/Documents/GitHub/Biossay/GstFront/biossay-webapp/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useEffect,useState}from\"react\";import{Dialog,DialogTitle,DialogContent,TextField,DialogActions,Button,FormControl,Select,MenuItem}from\"@material-ui/core\";import{saveBranch,getBranchById,getLines}from\"../../../services/api/ConfigService\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var ModalBranch=function ModalBranch(props){var isOpen=props.isOpen,handleClose=props.handleClose,branchid=props.branchid;var _useState=useState({Id:0,Name:'',LineId:0}),_useState2=_slicedToArray(_useState,2),branch=_useState2[0],setBranch=_useState2[1];var _useState3=useState([]),_useState4=_slicedToArray(_useState3,2),lines=_useState4[0],setLines=_useState4[1];useEffect(function(){if(isOpen){getLines().then(function(response){setLines(response.data);});if(branchid>0){getBranchById(branchid).then(function(response){console.log(response.data);setBranch({Id:response.data.id,Name:response.data.name,LineId:response.data.lineId});});}}},[isOpen,branchid]);var saveBranchLocal=function saveBranchLocal(e){var _e$target=e.target,name=_e$target.name,value=_e$target.value;setBranch(function(last){return _objectSpread(_objectSpread({},last),{},_defineProperty({},name,value));});};var sendBranchServer=function sendBranchServer(){saveBranch(branch).then(function(response){console.log(response);handleClose();});};return/*#__PURE__*/_jsxs(Dialog,{open:isOpen,onClose:handleClose,\"aria-labelledby\":\"form-dialog-title\",children:[/*#__PURE__*/_jsx(DialogTitle,{id:\"form-dialog-title\",children:\"Marca\"}),/*#__PURE__*/_jsxs(DialogContent,{children:[/*#__PURE__*/_jsx(FormControl,{fullWidth:true,variant:\"outlined\",children:/*#__PURE__*/_jsxs(Select,{fullWidth:true,label:\"Linea\",name:\"LineId\",value:branch.LineId||'0',onChange:saveBranchLocal,children:[/*#__PURE__*/_jsx(MenuItem,{value:\"0\",children:/*#__PURE__*/_jsx(\"em\",{children:\"Seleccione\"})}),lines.map(function(n){return/*#__PURE__*/_jsx(MenuItem,{value:n.id,children:n.name});})]})}),/*#__PURE__*/_jsx(TextField,{autoFocus:true,margin:\"dense\",label:\"Descripci\\xF3n\",type:\"text\",name:\"Name\",value:branch.Name||'',onChange:saveBranchLocal,fullWidth:true})]}),/*#__PURE__*/_jsxs(DialogActions,{children:[/*#__PURE__*/_jsx(Button,{onClick:handleClose,color:\"primary\",children:\"Salir\"}),/*#__PURE__*/_jsx(Button,{onClick:sendBranchServer,color:\"primary\",children:\"Guardar\"})]})]});};export default ModalBranch;","map":{"version":3,"sources":["/Users/danielcr/Documents/GitHub/Biossay/GstFront/biossay-webapp/src/components/configuration/components/modalBranch.js"],"names":["React","useEffect","useState","Dialog","DialogTitle","DialogContent","TextField","DialogActions","Button","FormControl","Select","MenuItem","saveBranch","getBranchById","getLines","ModalBranch","props","isOpen","handleClose","branchid","Id","Name","LineId","branch","setBranch","lines","setLines","then","response","data","console","log","id","name","lineId","saveBranchLocal","e","target","value","last","sendBranchServer","map","n"],"mappings":"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","sourcesContent":["import React,{ useEffect, useState} from \"react\";\nimport {Dialog,DialogTitle,DialogContent,\n  TextField,DialogActions,Button,FormControl,Select , MenuItem} from \"@material-ui/core\";\nimport { saveBranch, getBranchById ,getLines} from \"../../../services/api/ConfigService\";\n\nconst ModalBranch = (props)=>{\nconst { isOpen, handleClose,branchid  } = props;\n\nconst [ branch, setBranch] = useState({\n  Id : 0,\n  Name: '',\n  LineId : 0\n});\n\nconst [ lines, setLines] = useState([]);\n\nuseEffect(() => {\n  if (isOpen) {\n    getLines().then(response =>{\n      setLines(response.data);\n  })\n  if(branchid > 0){\n    getBranchById(branchid).then(response =>{\n      console.log(response.data);\n      setBranch({\n        Id : response.data.id,\n        Name : response.data.name,\n        LineId : response.data.lineId\n      })\n    });\n  }\n  }\n}, [isOpen,branchid])\n\nconst saveBranchLocal = (e) =>{\n  const { name , value} = e.target;\n\n  setBranch((last) => ({\n     ...last,\n     [name] : value\n  }));\n}\n\nconst sendBranchServer = ()=>{\n  saveBranch(branch).then(response => {\n      console.log(response);\n      handleClose();\n  });\n}\n\n    return(\n        <Dialog open={isOpen} onClose={handleClose} aria-labelledby=\"form-dialog-title\">\n             <DialogTitle id=\"form-dialog-title\">Marca</DialogTitle>\n        <DialogContent>\n\n           <FormControl fullWidth variant=\"outlined\"  > \n                    <Select \n                        fullWidth\n                        label=\"Linea\"\n                        name=\"LineId\"\n                        value={branch.LineId || '0'}\n                        onChange={saveBranchLocal}\n                        >\n                        <MenuItem value=\"0\">\n                            <em>Seleccione</em>\n                        </MenuItem>\n                        {(lines.map((n) => \n                          <MenuItem value={n.id}>{n.name}</MenuItem>\n                        ))}\n                      </Select>\n                    \n                    </FormControl>\n\n                     \n          <TextField\n            autoFocus\n            margin=\"dense\"\n            label=\"DescripciÃ³n\"\n            type=\"text\"\n            name=\"Name\"\n            value={branch.Name || ''}\n            onChange={saveBranchLocal}\n            fullWidth\n          />\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleClose} color=\"primary\">\n            Salir\n          </Button>\n          <Button onClick={sendBranchServer} color=\"primary\">\n            Guardar\n          </Button>\n        </DialogActions>\n        </Dialog>\n    )\n}\nexport default ModalBranch;"]},"metadata":{},"sourceType":"module"}