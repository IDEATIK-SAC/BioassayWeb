{"ast":null,"code":"var _jsxFileName = \"/Users/danielcr/Documents/GitHub/Biossay/GstFront/biossay-webapp/src/components/demand/components/tableDemand.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { Container, Grid, CardMedia, Typography, TextField, Button, Select, FormControl, MenuItem, Table, TableBody, TableCell, TableHead, TableRow } from \"@material-ui/core\";\nimport IconButton from \"@material-ui/core/IconButton\"; // Icons\n\nimport EditIcon from \"@material-ui/icons/EditOutlined\";\nimport DoneIcon from \"@material-ui/icons/DoneAllTwoTone\";\nimport RevertIcon from \"@material-ui/icons/NotInterestedOutlined\";\nimport Input from \"@material-ui/core/Input\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst CustomTableCell = ({\n  row,\n  name,\n  onChange\n}) => {\n  const {\n    isEditMode\n  } = row;\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: /*#__PURE__*/_jsxDEV(TableCell, {\n      align: \"left\",\n      children: isEditMode ? /*#__PURE__*/_jsxDEV(Input, {\n        value: row[name],\n        name: name,\n        onChange: e => onChange(e, row)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 11\n      }, this) : row[name]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 7\n  }, this);\n};\n\n_c = CustomTableCell;\n\nconst TableDemand = () => {\n  _s();\n\n  const [previous, setPrevious] = useState({});\n  const [rows, setRows] = useState([]);\n\n  const onToggleEditMode = id => {\n    setRows(state => {\n      return rows.map(row => {\n        if (row.id === id) {\n          return { ...row,\n            isEditMode: !row.isEditMode\n          };\n        }\n\n        return row;\n      });\n    });\n  };\n\n  const onChange = (e, row) => {\n    if (!previous[row.id]) {\n      setPrevious(state => ({ ...state,\n        [row.id]: row\n      }));\n    }\n\n    const value = e.target.value;\n    const name = e.target.name;\n    const {\n      id\n    } = row;\n    const newRows = rows.map(row => {\n      if (row.id === id) {\n        return { ...row,\n          [name]: value\n        };\n      }\n\n      return row;\n    });\n    setRows(newRows);\n  };\n\n  const onRevert = id => {\n    const newRows = rows.map(row => {\n      if (row.id === id) {\n        return previous[id] ? previous[id] : row;\n      }\n\n      return row;\n    });\n    setRows(newRows);\n    setPrevious(state => {\n      delete state[id];\n      return state;\n    });\n    onToggleEditMode(id);\n  };\n\n  const mewrowadd = () => {\n    setRows(last => [...last, {\n      id: Math.random()\n    }]);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Button, {\n      onClick: mewrowadd,\n      children: \" sGREGAR FILA\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Table, {\n      \"aria-label\": \"caption table\",\n      children: [/*#__PURE__*/_jsxDEV(TableHead, {\n        children: /*#__PURE__*/_jsxDEV(TableRow, {\n          children: [/*#__PURE__*/_jsxDEV(TableCell, {\n            align: \"left\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n            align: \"left\",\n            children: \"L\\xECnea\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n            align: \"left\",\n            children: \"Marca\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n            align: \"left\",\n            children: \"Modelo\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n            align: \"left\",\n            children: \"Medio\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n            align: \"left\",\n            children: \"Servicio\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n            align: \"left\",\n            children: \"Lugar\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n        children: rows.map(row => /*#__PURE__*/_jsxDEV(TableRow, {\n          children: [/*#__PURE__*/_jsxDEV(TableCell, {\n            children: row.isEditMode ? /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(IconButton, {\n                \"aria-label\": \"done\",\n                onClick: () => onToggleEditMode(row.id),\n                children: /*#__PURE__*/_jsxDEV(DoneIcon, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 116,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 112,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n                \"aria-label\": \"revert\",\n                onClick: () => onRevert(row.id),\n                children: /*#__PURE__*/_jsxDEV(RevertIcon, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 122,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 118,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n                \"aria-label\": \"delete\",\n                onClick: () => onRevert(row.id),\n                children: \"Eliminar\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 124,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true) : /*#__PURE__*/_jsxDEV(IconButton, {\n              \"aria-label\": \"delete\",\n              onClick: () => onToggleEditMode(row.id),\n              children: /*#__PURE__*/_jsxDEV(EditIcon, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 136,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 132,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(CustomTableCell, {\n            row,\n            name: \"line\",\n            onChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 140,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(CustomTableCell, {\n            row,\n            name: \"brand\",\n            onChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(CustomTableCell, {\n            row,\n            name: \"model\",\n            onChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 142,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(CustomTableCell, {\n            row,\n            name: \"middle\",\n            onChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 143,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(CustomTableCell, {\n            row,\n            name: \"service\",\n            onChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 144,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(CustomTableCell, {\n            row,\n            name: \"place\",\n            onChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 15\n          }, this)]\n        }, row.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 9\n  }, this);\n};\n\n_s(TableDemand, \"ehGb4QknlABqeb8PH/uCiRLu1/E=\");\n\n_c2 = TableDemand;\nexport default TableDemand;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"CustomTableCell\");\n$RefreshReg$(_c2, \"TableDemand\");","map":{"version":3,"sources":["/Users/danielcr/Documents/GitHub/Biossay/GstFront/biossay-webapp/src/components/demand/components/tableDemand.js"],"names":["React","useState","Container","Grid","CardMedia","Typography","TextField","Button","Select","FormControl","MenuItem","Table","TableBody","TableCell","TableHead","TableRow","IconButton","EditIcon","DoneIcon","RevertIcon","Input","CustomTableCell","row","name","onChange","isEditMode","e","TableDemand","previous","setPrevious","rows","setRows","onToggleEditMode","id","state","map","value","target","newRows","onRevert","mewrowadd","last","Math","random"],"mappings":"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","sourcesContent":["\nimport React,{ useState} from \"react\"; \nimport { Container, Grid ,CardMedia, Typography,TextField, Button,Select,FormControl,MenuItem,\nTable,TableBody,TableCell,TableHead,TableRow} from \"@material-ui/core\";\n\nimport IconButton from \"@material-ui/core/IconButton\";\n// Icons\nimport EditIcon from \"@material-ui/icons/EditOutlined\";\nimport DoneIcon from \"@material-ui/icons/DoneAllTwoTone\";\nimport RevertIcon from \"@material-ui/icons/NotInterestedOutlined\";\nimport Input from \"@material-ui/core/Input\";\n\n  const CustomTableCell = ({ row, name, onChange }) => {\n   \n    const { isEditMode } = row;\n    return (\n      <React.Fragment>\n     \n      <TableCell align=\"left\" >\n        {isEditMode ? (\n          <Input\n            value={row[name]}\n            name={name}\n            onChange={e => onChange(e, row)}\n          />\n        ) : (\n          row[name]\n        )}\n      </TableCell>\n      </React.Fragment>\n    );\n  };\n\nconst TableDemand = ()=>{\n\n    const [previous, setPrevious] = useState({});\n    const [rows, setRows] = useState([  ]);\n    const onToggleEditMode = id => {\n        setRows(state => {\n          return rows.map(row => {\n            if (row.id === id) {\n              return { ...row, isEditMode: !row.isEditMode };\n            }\n            return row;\n          });\n        });\n      };\n    \n      const onChange = (e, row) => {\n        if (!previous[row.id]) {\n          setPrevious(state => ({ ...state, [row.id]: row }));\n        }\n        const value = e.target.value;\n        const name = e.target.name;\n        const { id } = row;\n        const newRows = rows.map(row => {\n          if (row.id === id) {\n            return { ...row, [name]: value };\n          }\n          return row;\n        });\n        setRows(newRows);\n      };\n    \n      const onRevert = id => {\n        const newRows = rows.map(row => {\n          if (row.id === id) {\n            return previous[id] ? previous[id] : row;\n          }\n          return row;\n        });\n        setRows(newRows);\n        setPrevious(state => {\n          delete state[id];\n          return state;\n        });\n        onToggleEditMode(id);\n      };\n\n      const mewrowadd = () => {\n        setRows((last) => [\n          ...last,\n          {\n            id: Math.random()\n          }\n        ]);\n      };\n\n\n    return(\n        <div>\n            \n        <Button onClick={mewrowadd}> sGREGAR FILA</Button>\n        <Table  aria-label=\"caption table\"> \n        <TableHead>\n          <TableRow>\n            <TableCell align=\"left\"></TableCell>\n            <TableCell align=\"left\">Lìnea</TableCell>\n            <TableCell align=\"left\">Marca</TableCell>\n            <TableCell align=\"left\">Modelo</TableCell>\n            <TableCell align=\"left\">Medio</TableCell>\n            <TableCell align=\"left\">Servicio</TableCell>\n            <TableCell align=\"left\">Lugar</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {rows.map(row => (\n            <TableRow key={row.id}>\n              <TableCell >\n                {row.isEditMode ? (\n                  <>\n                    <IconButton\n                      aria-label=\"done\"\n                      onClick={() => onToggleEditMode(row.id)}\n                    >\n                      <DoneIcon />\n                    </IconButton>\n                    <IconButton\n                      aria-label=\"revert\"\n                      onClick={() => onRevert(row.id)}\n                    >\n                      <RevertIcon />\n                    </IconButton>\n                    <IconButton\n                      aria-label=\"delete\"\n                      onClick={() => onRevert(row.id)}\n                    >\n                    Eliminar\n                    </IconButton>\n                  </>\n                ) : (\n                  <IconButton\n                    aria-label=\"delete\"\n                    onClick={() => onToggleEditMode(row.id)}\n                  >\n                    <EditIcon />\n                  </IconButton>\n                )}\n              </TableCell> \n              <CustomTableCell {...{ row, name: \"line\", onChange }} />\n              <CustomTableCell {...{ row, name: \"brand\", onChange }} />\n              <CustomTableCell {...{ row, name: \"model\", onChange }} />\n              <CustomTableCell {...{ row, name: \"middle\", onChange }} />\n              <CustomTableCell {...{ row, name: \"service\", onChange }} />\n              <CustomTableCell {...{ row, name: \"place\", onChange }} />\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n\n      </div>\n    );\n}\nexport default TableDemand;"]},"metadata":{},"sourceType":"module"}