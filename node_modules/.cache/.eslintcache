[{"/Users/danielcr/Documents/GitHub/Biossay/GstFront/biossay-webapp/src/index.js":"1","/Users/danielcr/Documents/GitHub/Biossay/GstFront/biossay-webapp/src/App.js":"2","/Users/danielcr/Documents/GitHub/Biossay/GstFront/biossay-webapp/src/reportWebVitals.js":"3","/Users/danielcr/Documents/GitHub/Biossay/GstFront/biossay-webapp/src/theme/Theme.js":"4","/Users/danielcr/Documents/GitHub/Biossay/GstFront/biossay-webapp/src/components/navigation/AppNavbar.js":"5","/Users/danielcr/Documents/GitHub/Biossay/GstFront/biossay-webapp/src/components/demand/Demand.js":"6","/Users/danielcr/Documents/GitHub/Biossay/GstFront/biossay-webapp/src/components/navigation/RouteSecurity.js":"7","/Users/danielcr/Documents/GitHub/Biossay/GstFront/biossay-webapp/src/components/navigation/bar/BarSession.js":"8","/Users/danielcr/Documents/GitHub/Biossay/GstFront/biossay-webapp/src/components/navigation/bar/leftMenu.js":"9","/Users/danielcr/Documents/GitHub/Biossay/GstFront/biossay-webapp/src/components/report/Report.js":"10","/Users/danielcr/Documents/GitHub/Biossay/GstFront/biossay-webapp/src/components/demand/ListDemand.js":"11","/Users/danielcr/Documents/GitHub/Biossay/GstFront/biossay-webapp/src/components/survey/Survey.js":"12","/Users/danielcr/Documents/GitHub/Biossay/GstFront/biossay-webapp/src/components/survey/ListSurvey.js":"13","/Users/danielcr/Documents/GitHub/Biossay/GstFront/biossay-webapp/src/components/demand/components/tableDemand.js":"14","/Users/danielcr/Documents/GitHub/Biossay/GstFront/biossay-webapp/src/components/security/Login.js":"15","/Users/danielcr/Documents/GitHub/Biossay/GstFront/biossay-webapp/src/context/store.js":"16","/Users/danielcr/Documents/GitHub/Biossay/GstFront/biossay-webapp/src/context/initialState.js":"17","/Users/danielcr/Documents/GitHub/Biossay/GstFront/biossay-webapp/src/context/reducers/index.js":"18","/Users/danielcr/Documents/GitHub/Biossay/GstFront/biossay-webapp/src/context/reducers/sessionUserReducer.js":"19","/Users/danielcr/Documents/GitHub/Biossay/GstFront/biossay-webapp/src/context/reducers/openSnackbarReducer.js":"20","/Users/danielcr/Documents/GitHub/Biossay/GstFront/biossay-webapp/src/services/api/LoginService.js":"21","/Users/danielcr/Documents/GitHub/Biossay/GstFront/biossay-webapp/src/services/HttpClient.js":"22","/Users/danielcr/Documents/GitHub/Biossay/GstFront/biossay-webapp/src/services/api/Demandservice.js":"23","/Users/danielcr/Documents/GitHub/Biossay/GstFront/biossay-webapp/src/services/api/ClientService.js":"24","/Users/danielcr/Documents/GitHub/Biossay/GstFront/biossay-webapp/src/components/configuration/Configuration.js":"25","/Users/danielcr/Documents/GitHub/Biossay/GstFront/biossay-webapp/src/components/configuration/components/enterprise.js":"26","/Users/danielcr/Documents/GitHub/Biossay/GstFront/biossay-webapp/src/components/configuration/components/profiles.js":"27","/Users/danielcr/Documents/GitHub/Biossay/GstFront/biossay-webapp/src/components/dashboard/Dashboard.js":"28","/Users/danielcr/Documents/GitHub/Biossay/GstFront/biossay-webapp/src/components/configuration/Services.js":"29","/Users/danielcr/Documents/GitHub/Biossay/GstFront/biossay-webapp/src/components/configuration/components/modalLine.js":"30","/Users/danielcr/Documents/GitHub/Biossay/GstFront/biossay-webapp/src/components/configuration/Branch.js":"31","/Users/danielcr/Documents/GitHub/Biossay/GstFront/biossay-webapp/src/components/configuration/components/modalBranch.js":"32","/Users/danielcr/Documents/GitHub/Biossay/GstFront/biossay-webapp/src/components/configuration/Model.js":"33","/Users/danielcr/Documents/GitHub/Biossay/GstFront/biossay-webapp/src/components/configuration/components/modalModel.js":"34","/Users/danielcr/Documents/GitHub/Biossay/GstFront/biossay-webapp/src/services/api/ConfigService.js":"35","/Users/danielcr/Documents/GitHub/Biossay/GstFront/biossay-webapp/src/services/api/CompanyService.js":"36","/Users/danielcr/Documents/GitHub/Biossay/GstFront/biossay-webapp/src/services/api/ReportService.js":"37","/Users/danielcr/Documents/GitHub/Biossay/GstFront/biossay-webapp/src/components/report/ListReport.js":"38","/Users/danielcr/Documents/GitHub/Biossay/GstFront/biossay-webapp/src/components/users/ListUser.js":"39","/Users/danielcr/Documents/GitHub/Biossay/GstFront/biossay-webapp/src/components/users/popup/detailUser.js":"40","/Users/danielcr/Documents/GitHub/Biossay/GstFront/biossay-webapp/src/components/customers/Customer.js":"41","/Users/danielcr/Documents/GitHub/Biossay/GstFront/biossay-webapp/src/components/customers/components/modalCustomer.js":"42","/Users/danielcr/Documents/GitHub/Biossay/GstFront/biossay-webapp/src/components/survey/ViewSurvey.js":"43"},{"size":733,"mtime":1634147715720,"results":"44","hashOfConfig":"45"},{"size":4636,"mtime":1641403766840,"results":"46","hashOfConfig":"45"},{"size":362,"mtime":1623773215346,"results":"47","hashOfConfig":"45"},{"size":353,"mtime":1625416074204,"results":"48","hashOfConfig":"45"},{"size":430,"mtime":1634147715721,"results":"49","hashOfConfig":"45"},{"size":16857,"mtime":1638226838471,"results":"50","hashOfConfig":"45"},{"size":653,"mtime":1634147715721,"results":"51","hashOfConfig":"45"},{"size":4127,"mtime":1636385297009,"results":"52","hashOfConfig":"45"},{"size":7365,"mtime":1637858597171,"results":"53","hashOfConfig":"45"},{"size":49976,"mtime":1638443778654,"results":"54","hashOfConfig":"45"},{"size":3213,"mtime":1637859833497,"results":"55","hashOfConfig":"45"},{"size":372,"mtime":1641403752855,"results":"56","hashOfConfig":"45"},{"size":1806,"mtime":1623793509003,"results":"57","hashOfConfig":"45"},{"size":6979,"mtime":1638444064433,"results":"58","hashOfConfig":"45"},{"size":4323,"mtime":1634147715720,"results":"59","hashOfConfig":"45"},{"size":371,"mtime":1625054743066,"results":"60","hashOfConfig":"45"},{"size":31,"mtime":1625054731005,"results":"61","hashOfConfig":"45"},{"size":329,"mtime":1625057479195,"results":"62","hashOfConfig":"45"},{"size":948,"mtime":1625065712258,"results":"63","hashOfConfig":"45"},{"size":429,"mtime":1625057456989,"results":"64","hashOfConfig":"45"},{"size":2944,"mtime":1637616287131,"results":"65","hashOfConfig":"45"},{"size":377,"mtime":1638533282984,"results":"66","hashOfConfig":"45"},{"size":1346,"mtime":1638226391289,"results":"67","hashOfConfig":"45"},{"size":2323,"mtime":1636568665439,"results":"68","hashOfConfig":"45"},{"size":5134,"mtime":1626131643941,"results":"69","hashOfConfig":"45"},{"size":3142,"mtime":1634147715726,"results":"70","hashOfConfig":"45"},{"size":261,"mtime":1625141216670,"results":"71","hashOfConfig":"45"},{"size":445,"mtime":1636385272902,"results":"72","hashOfConfig":"45"},{"size":3903,"mtime":1636583838638,"results":"73","hashOfConfig":"45"},{"size":1682,"mtime":1636583923406,"results":"74","hashOfConfig":"45"},{"size":4955,"mtime":1636585608622,"results":"75","hashOfConfig":"45"},{"size":2776,"mtime":1636585431654,"results":"76","hashOfConfig":"45"},{"size":5073,"mtime":1636587455632,"results":"77","hashOfConfig":"45"},{"size":2863,"mtime":1636587258036,"results":"78","hashOfConfig":"45"},{"size":3828,"mtime":1636586460509,"results":"79","hashOfConfig":"45"},{"size":609,"mtime":1626202850377,"results":"80","hashOfConfig":"45"},{"size":2182,"mtime":1638225985073,"results":"81","hashOfConfig":"45"},{"size":2942,"mtime":1637861687622,"results":"82","hashOfConfig":"45"},{"size":4060,"mtime":1636581771054,"results":"83","hashOfConfig":"45"},{"size":4597,"mtime":1636669042829,"results":"84","hashOfConfig":"45"},{"size":4138,"mtime":1636569078331,"results":"85","hashOfConfig":"45"},{"size":5957,"mtime":1636568880237,"results":"86","hashOfConfig":"45"},{"size":4519,"mtime":1641403754228,"results":"87","hashOfConfig":"45"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},"5fm9ss",{"filePath":"91","messages":"92","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"90"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"90"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"90"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"90"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"90"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"90"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137","usedDeprecatedRules":"90"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"90"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"90"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150","usedDeprecatedRules":"90"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"155","usedDeprecatedRules":"90"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"176","usedDeprecatedRules":"90"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/danielcr/Documents/GitHub/Biossay/GstFront/biossay-webapp/src/index.js",[],["187","188"],"/Users/danielcr/Documents/GitHub/Biossay/GstFront/biossay-webapp/src/App.js",["189","190"],"/Users/danielcr/Documents/GitHub/Biossay/GstFront/biossay-webapp/src/reportWebVitals.js",[],"/Users/danielcr/Documents/GitHub/Biossay/GstFront/biossay-webapp/src/theme/Theme.js",[],"/Users/danielcr/Documents/GitHub/Biossay/GstFront/biossay-webapp/src/components/navigation/AppNavbar.js",["191"],"import React from 'react';\nimport { AppBar } from \"@material-ui/core\";\nimport BarSession from './bar/BarSession';\nimport { useStateValue } from '../../context/store';\n\nconst AppNavbar = () => {\n    const [ {sessionUser} , dispatch] = useStateValue();\n    \n    return sessionUser ?\n        (sessionUser.authenticated === true ? <AppBar position=\"static\"><BarSession /></AppBar> : null)\n        : null;\n};\n\nexport default AppNavbar;","/Users/danielcr/Documents/GitHub/Biossay/GstFront/biossay-webapp/src/components/demand/Demand.js",["192","193"],"import React,{ useState, useEffect} from \"react\"; \nimport { Container, Grid ,CardMedia, Typography,TextField, Button,Select,FormControl,MenuItem} from \"@material-ui/core\";\nimport logoicon from '../logoicon.jpeg';\nimport TableDemand from './components/tableDemand';\nimport {  getClientById , getRUC} from \"../../services/api/ClientService\";\nimport { getEmployeeByType,getEmployeeAdviser } from \"../../services/api/LoginService\";\nimport { saveRequestDocument , GetRequestsDocumentById,GetCorrelative} from \"../../services/api/Demandservice\";\nimport { getCompanyById} from \"../../services/api/CompanyService\";\nimport { withRouter } from 'react-router-dom'; \nimport { useStateValue } from '../../context/store'\nimport swal from 'sweetalert';\n\n\nconst Demand = (props) =>{\n    const { match} = props;\n    const demandid = match.params.demandid;\n\n    \n\n    const [ disabledfields , setDisabledFields] = useState({\n        priority: false,\n        responsible : false,\n        scheduleddate : false\n    });\n\n    const [ demandModel , setDemandModel ] = useState({\n        requestId : 0,\n        applicationseries : '0001',\n        clientID : 5,\n        contact : '',\n        correlativeNumber : '',\n        customerAddress : '',\n        dateofissue : '',\n        idCategory : 0,\n        idPriority : 0,\n        phone : '',\n        reason: '',\n        responsible: '',\n        scheduledDate: '',\n        adviser :'',\n        requestDeatils : [],\n        lineRequestDetail:'0',\n        mark:'0',\n        mediumRequestDetail : '0',\n        model:'0',\n        numberRequestDetail:1,\n        place:'0',\n        serviceRequestDetail : '0'\n    });\n\n    const [ clientModel , setClientModel ] = useState({\n        id : 0,\n        customerName : '',\n        customerAddress: '',\n        rucClient : '',\n        active : true\n    });\n\n    const [ companyModel, setCompanyModel] = useState({\n        address : '',\n        branch : '',\n        idCompany : 0,\n        phone : '',\n        ruc:'',\n        socialReason : '',\n        tradeName : ''\n    });\n\n    const [ adivers, setAdvisers ] = useState([]);\n    const [ otheradivers, setOtherAdvisers ] = useState([]);\n\n    const [{ sessionUser }, dispatch] = useStateValue();\n\n    useEffect(() => {\n        checkRoleFields();\n        if (demandid != null) {\n            GetRequestsDocumentById(demandid).then(response =>{\n                \n                const { data } = response;\n                setDemandModel(data);\n                \n\n                getClientById(data.clientID).then(response =>{\n                const { data } = response; \n                setClientModel(data);\n                });\n            })\n        }else{\n            GetCorrelative().then(response =>{\n                setDemandModel({ \n                  correlativeNumber : response.data\n                })\n            });\n        }\n        getCompanyById(1).then(response =>{ \n            setCompanyModel(response.data);\n        }) \n\n        getAdvisers();\n    }, [demandid])\n\n\n    const checkRoleFields = ()=>{\n        if(sessionUser.user.userProfileId === 2){\n            setDisabledFields({\n                priority : true,\n                responsible : true,\n                scheduleddate : true\n            })\n        }\n    \n    }\n\n    const getAdvisers = ()=>{\n        getEmployeeByType(2).then(response => {\n            setAdvisers(response.data);\n        });\n\n        getEmployeeAdviser().then(response => {\n            setOtherAdvisers(response.data);\n        });\n    }\n\n    const saveDemand = (e) =>{\n        const { name, value} = e.target;\n        setDemandModel(last => ({\n            ...last,\n            [name]: value\n        }))\n    }\n\n    const saveClient = (e) =>{\n        const { name, value} = e.target;\n        setClientModel(last => ({\n            ...last,\n            [name]: value\n        }))\n    }\n\n    const sendClient = () => {\n  \n        saveRequestDocument(demandModel).then(response =>{\n              \n            if(response.data){\n              swal(\"Buen trabajo!\", \"La solicitud a sido guardada\", \"success\")\n              .then(() => {\n                props.history.push('/listdemand');\n              });\n            }else{\n              swal({\n                  title: \"Revise los campos\",\n                  text: \"Es necesario completar todos los campos de la solicitud\",\n                  icon: \"warning\",\n                  buttons: true,\n                  dangerMode: true,\n                })\n            }\n\n         });\n \n\n    }\n\n    const getLocalRuc = ()=>{\n        getRUC(clientModel.rucClient).then(response =>{\n             console.log(response);\n             if(response.response == null){\n                swal(\"Información!\", \"El cliente no se encuentra registrado\", \"info\");\n             }else{\n                setClientModel(response.response); \n                var now = new Date();\n                var durationInMinutes = 300;\n                now.setMinutes(now.getMinutes() - durationInMinutes);\n\n                setDemandModel((last) =>({\n                    ...last,\n                    idCategory : response.response.categoryId,\n                    clientID : response.response.id,\n                    dateofissue : now.toISOString().slice(0,16),\n                    idPriority : 6\n                }))\n             } \n        });\n    }\n \n\n    return(\n        <Container fullwidth style={{marginTop:50}} >\n            <Grid container spacing={2}>\n                <Grid item  md={3} xs={4} >\n                <CardMedia\n                    style={{height: 200, width: 200}}\n                    component=\"img\"\n                    alt=\"Biossay\"\n                    height=\"auto\"\n                    image={logoicon}\n                />\n                </Grid>\n                <Grid item  md={5} xs={8}>\n                    <Typography variant=\"h4\" style={{ fontWeight:\"bold\" ,height:\"30%\"}}>{companyModel.tradeName}</Typography>\n                    <Typography style={{ height:\"30%\"}}>{companyModel.address}</Typography>\n                    <Typography style={{ height:\"10%\"}}>TELEFONO: {companyModel.phone}</Typography>\n                    <Typography style={{ height:\"10%\"}}>CEL: 991463701 / 980658053</Typography>\n                    <Typography style={{ height:\"10%\"}}>EMAIL : gerencia@bioassay.com.pe</Typography>\n                </Grid>\n                <Grid item  md={4} xs={12} style= {{ borderStyle : \"solid\",textAlign:\"center\"}} >\n                    <Typography  variant=\"h5\"  style={{ height:\"33%\"}}>RUC {companyModel.ruc}</Typography>\n                    <Typography  variant=\"h5\"  style={{ height:\"33%\" ,fontWeight:\"bold\" }}>SOLICITUD DE SERVICIO</Typography>\n                    <Typography  variant=\"h5\"  style={{ height:\"33%\"}}>0001-{demandModel.correlativeNumber}</Typography>\n                </Grid>\n\n                <Grid container md={6} direction=\"row\" style={{marginTop:20}} alignItems=\"center\">\n                    <Grid item md={3} xs={4}> \n                        <Typography> RUC </Typography> \n                    </Grid>\n                    <Grid item md={8} xs={8} direction=\"row\">  \n                        <TextField type=\"number\" fullWidth id=\"outlined-basic\" label=\"\" variant=\"outlined\" onBlur={getLocalRuc}   onChange={saveClient} value={clientModel.rucClient} name=\"rucClient\" />\n                    </Grid>\n                </Grid>\n                <Grid container md={6} direction=\"row\"style={{marginTop:20}}  alignItems=\"center\">\n                    <Grid item md={3} xs={4}> \n                        <Typography> F. EMISIÓN </Typography> \n                    </Grid>\n                    <Grid item md={9} xs={8} direction=\"row\">  \n                        <TextField type=\"datetime-local\" fullWidth id=\"outlined-basic\" disabled={true} onChange={saveDemand} variant=\"outlined\" value={demandModel.dateofissue} name=\"dateofissue\" />\n                    </Grid>\n                </Grid>\n                <Grid container md={6} direction=\"row\" style={{marginTop:20}} alignItems=\"center\">\n                    <Grid item md={3} xs={4}> \n                        <Typography> CLIENTE </Typography> \n                    </Grid>\n                    <Grid item md={8} xs={8} direction=\"row\">  \n                        <TextField fullWidth id=\"outlined-basic\"  onChange={saveClient} variant=\"outlined\" value={clientModel.customerName} name=\"customerName\"  />\n                    </Grid>\n                </Grid>\n                <Grid container md={6} direction=\"row\" style={{marginTop:20}}  alignItems=\"center\">\n                    <Grid item md={3} xs={4}> \n                        <Typography> PRIORIDAD</Typography> \n                    </Grid>\n                    <Grid item md={9} xs={8} direction=\"row\">  \n                    <FormControl fullWidth variant=\"outlined\"  > \n                        <Select\n                        labelId=\"demo-simple-select-outlined-label\"\n                        id=\"demo-simple-select-outlined\"\n                        value={demandModel.idPriority || 6} \n                        fullWidth\n                        disabled={disabledfields.priority}\n                        onChange={saveDemand}\n                        label=\"Age\"\n                        name=\"idPriority\"\n                        >\n                        <MenuItem value={0}>\n                            <em>Ninguno</em>\n                        </MenuItem>\n                        <MenuItem value={1}><input type=\"color\" value=\"#FF0000\" disabled /> MUY URGENTE</MenuItem>\n                        <MenuItem value={2}><input type=\"color\" value=\"#1DEE2D\" disabled /> URGENCIA MENOR</MenuItem>\n                        <MenuItem value={3}><input type=\"color\" value=\"#EEEA0D\" disabled /> SIN URGENCIA</MenuItem>\n                        <MenuItem value={6}><input type=\"color\" value=\"#FFFFFF\" disabled /> SIN SELECCIONAR</MenuItem>\n                        </Select>\n                    \n                    </FormControl>\n                    </Grid>\n                </Grid>\n                <Grid container md={6} direction=\"row\"  style={{marginTop:20}} alignItems=\"center\">\n                    <Grid item md={3} xs={4}> \n                        <Typography> DIRECCIÓN </Typography> \n                    </Grid>\n                    <Grid item md={8} xs={8} direction=\"row\">  \n                        <TextField fullWidth id=\"outlined-basic\"  onChange={saveClient} label=\"\" variant=\"outlined\" name=\"customerAddress\" value={clientModel.customerAddress} />\n                    </Grid>\n                </Grid>\n                <Grid container md={6} direction=\"row\" style={{marginTop:20}} alignItems=\"center\">\n                    <Grid item md={3} xs={4}> \n                        <Typography> ASESOR CIENTÍFCO </Typography> \n                    </Grid>\n                    <Grid item md={9} xs={8} direction=\"row\">  \n                    <FormControl fullWidth variant=\"outlined\"  > \n                        <Select\n                        fullWidth\n                        name=\"responsible\"\n                        value={demandModel.responsible || \"0\"}\n                        onChange={saveDemand}\n                        disabled={disabledfields.responsible} >\n                        <MenuItem value=\"0\">\n                            <em>Seleccione un asesor </em>\n                        </MenuItem>\n                        {(otheradivers.map((n) => \n                          <MenuItem key={n.id} value={n.id}>{n.name} </MenuItem>\n                        ))}\n                        </Select>\n                    \n                    </FormControl>\n                    </Grid>\n                </Grid>\n                <Grid container md={6} direction=\"row\" style={{marginTop:20}} alignItems=\"center\">\n                    <Grid item md={3} xs={4}> \n                        <Typography> CATEGORÍA </Typography> \n                    </Grid>\n                    <Grid item md={8} xs={8} direction=\"row\">  \n                    <FormControl fullWidth variant=\"outlined\"  > \n                        <Select\n                        labelId=\"demo-simple-select-outlined-label\"\n                        id=\"demo-simple-select-outlined\" \n                        fullWidth\n                        label=\"Age\"\n                        name=\"idCategory\"\n                        value={demandModel.idCategory}\n                        onChange={saveDemand}\n                        disabled={true}\n                        >\n                        <MenuItem value=\"\">\n                            <em>Seleccione</em>\n                        </MenuItem>\n                        <MenuItem value={1}>SIN CATEGORIA</MenuItem>\n                        <MenuItem value={2}>BRONZE</MenuItem>\n                        <MenuItem value={3}>SILVER</MenuItem>\n                        <MenuItem value={4}>GOLD</MenuItem>\n                        <MenuItem value={5}>PLATINUM</MenuItem>\n                        <MenuItem value={6}>DIAMOND</MenuItem>\n                        </Select>\n                    \n                    </FormControl>\n                    </Grid>\n                </Grid>\n                <Grid container md={6} direction=\"row\" style={{marginTop:20}} alignItems=\"center\">\n                    <Grid item md={3} xs={4}> \n                        <Typography> F. PROGAMADA </Typography> \n                    </Grid>\n                    <Grid item md={9} xs={8}  direction=\"row\">  \n                        <TextField type=\"datetime-local\" fullWidth id=\"outlined-basic\" onChange={saveDemand} disabled={disabledfields.scheduleddate} label=\"\" variant=\"outlined\" name=\"scheduledDate\" value={demandModel.scheduledDate} />\n                    </Grid>\n                </Grid> \n                \n                <div style={{ height: 150, width: '100%',marginTop:20,marginBottom:20,overflow: \"auto\" }}>\n                <TableDemand demandDetailModel={demandModel} setDemandDetailModel={setDemandModel}/> \n                   \n\n                </div>\n                <Grid container md={12} direction=\"row\" style={{marginTop:20}} alignItems=\"center\">\n                    <Grid item md={3} xs={4}> \n                        <Typography> ASESOR COMERCIAL </Typography> \n                    </Grid>\n                    \n                    <Grid item md={8} xs={8} direction=\"row\">  \n                    <FormControl fullWidth variant=\"outlined\"  > \n                        <Select\n                        fullWidth\n                        name=\"adviser\"\n                        value={demandModel.adviser || \"0\"}\n                        onChange={saveDemand} >\n                        <MenuItem value=\"0\">\n                            <em>Seleccione un supervisor </em>\n                        </MenuItem>\n                        {(adivers.map((n) => \n                          <MenuItem key={n.id} value={n.id}>{n.name} </MenuItem>\n                        ))}\n                        </Select>\n                    \n                    </FormControl>\n                    </Grid>\n                </Grid>\n                <Grid container md={12} direction=\"row\" style={{marginTop:20}} alignItems=\"center\">\n                    <Grid item md={3} xs={4}> \n                        <Typography> MOTIVO </Typography> \n                    </Grid>\n                    <Grid item md={8} xs={8} direction=\"row\">  \n                        <TextField fullWidth id=\"outlined-basic\" label=\"\" onChange={saveDemand} variant=\"outlined\" name=\"reason\" value={demandModel.reason} />\n                    </Grid>\n                </Grid>\n                <Grid container md={12} direction=\"row\" style={{marginTop:20}} alignItems=\"center\">\n                    <Grid item md={3} xs={4}> \n                        <Typography> CONTACTO </Typography> \n                    </Grid>\n                    <Grid item md={8} xs={8} direction=\"row\">  \n                        <TextField fullWidth id=\"outlined-basic\" label=\"\" onChange={saveDemand} variant=\"outlined\" name=\"contact\" value={demandModel.contact} />\n                    </Grid>\n                </Grid>\n                <Grid container md={12} direction=\"row\" style={{marginTop:20,marginBottom:30}} alignItems=\"center\">\n                    <Grid item md={3} xs={4}> \n                        <Typography> TELÉFONO </Typography> \n                    </Grid>\n                    <Grid item md={8} xs={8} direction=\"row\">  \n                        <TextField fullWidth id=\"outlined-basic\" label=\"\" onChange={saveDemand} variant=\"outlined\" name=\"phone\" value={demandModel.phone} />\n                    </Grid>\n                    \n                </Grid>\n\n                <Grid container md={12}  style={{marginTop:20,marginBottom:30,textAlign:\"right\"}} >\n                    <Button onClick={sendClient} color=\"primary\" style={{ color : \"white\"}} variant=\"contained\">Guardar</Button>\n                </Grid>\n            </Grid>\n        </Container>\n\n    );\n}\n\nexport default withRouter(Demand);","/Users/danielcr/Documents/GitHub/Biossay/GstFront/biossay-webapp/src/components/navigation/RouteSecurity.js",["194"],"import React from 'react';\nimport { Route ,Redirect} from 'react-router-dom';\nimport { useStateValue } from '../../context/store';\n\nfunction RouteSecurity({ component: Component, ...rest }) {\n    const [{ sessionUser }, dispatch] = useStateValue();\n    \n    return (\n        <Route\n            {...rest}\n            render={(props) =>\n                sessionUser ? (sessionUser.authenticated === true ? (\n                    <Component {...props} {...rest} />\n                ) :\n                <Redirect to=\"/auth/login\"/>\n                ) :\n                <Redirect to=\"/auth/login\"/>\n            }\n        />\n    );\n}\nexport default RouteSecurity;","/Users/danielcr/Documents/GitHub/Biossay/GstFront/biossay-webapp/src/components/navigation/bar/BarSession.js",["195"],"import React, { useState , useEffect} from 'react';\nimport { Toolbar, IconButton, Typography, makeStyles, Button, Drawer } from \"@material-ui/core\";\nimport { LeftMenuBar } from './leftMenu';\nimport { withRouter } from \"react-router-dom\";\nimport { useStateValue } from \"../../../context/store\";\nconst useStyles = makeStyles((theme) => ({\n    seccionDesktop: {\n        display: \"none\",\n        [theme.breakpoints.up(\"md\")]: {\n            display: \"flex\"\n        }\n    },\n    seccionMobile: {\n        display: \"flex\",\n        [theme.breakpoints.up(\"md\")]: {\n            display: \"none\"\n        }\n    },\n    grow: {\n        flexGrow: 1\n    },\n    avatarSize: {\n        width: 40,\n        height: 40\n    },\n    list: {\n        width: 280,\n        backgroundColor:\"white\",\n        color:\"#646464\",\n        height:\"100%\"\n    },\n    listBottom: {\n        width: \"100%\"\n    },\n    listItemText: {\n        fontSize: \"16px\",\n        fontWeight: 600,\n        paddingLeft: \"20px\",\n    },\n}))\n\nconst BarSession = (props) => {\n\n    const classes = useStyles();\n    const [openDrawLeft, setDrawLeft] = useState(false);\n    const [open, setOpen] = useState(false);\n    const [openOptions, setOpenOptions] = useState(false);\n    const [openReport, setOpenReport] = useState(false);\n    const [openSurvey, setOpenSurvey] = useState(false);\n    const [itemButtonBar, setButtonBar] = useState(\"\");\n    const [{ sessionUser }, dispatch] = useStateValue();\n\n    useEffect(() => {\n        selectButtonBar();\n    }, [itemButtonBar])\n\n    const selectButtonBar = () => {\n\n    }\n    \n    const handleClick = () => {\n        setOpen(!open);\n    }\n    const handleClickMaintenance = () => {\n        setOpenOptions(!openOptions);\n    }\n    const handleClickReport = () => {\n        setOpenReport(!openReport);\n    }\n    const handleClickSurvey = () => {\n        setOpenSurvey(!openSurvey);\n    }\n\n    const closeDrawLeft = () => {\n        setDrawLeft(false);\n    }\n\n    const openDraw = () => {\n        setDrawLeft(true);\n    }\n\n    const closeSession = ()=>{\n        window.localStorage.clear();\n        dispatch({\n            type:\"SESSION_END\",\n            session : null,\n            authenticated : false\n        })\n        props.history.push('/auth/login');\n    }\n\n    return (\n        <React.Fragment>\n            <Drawer\n                open={openDrawLeft}\n                close={closeDrawLeft}\n                anchor=\"left\">\n                <div className={classes.list} >\n                    <LeftMenuBar classes={classes} \n                                closemenu={closeDrawLeft} \n                                handleClick={handleClick} open={open}\n                                handleClickMaintenance = {handleClickMaintenance} openOptions={openOptions} \n                                handleClickReport={handleClickReport} openReport={openReport}\n                                handleClickSurvey={handleClickSurvey} openSurvey={openSurvey}\n                                sessionUser = {sessionUser}\n                                />\n                </div>\n            </Drawer>\n\n            <Toolbar style={{ backgroundColor: \"#022C3B\", color: \"white\" }}>\n                <IconButton color=\"inherit\" onClick={openDraw}>  \n                    <i className=\"material-icons\">menu</i>\n                </IconButton>\n             \n                <Typography variant=\"h6\">\n                    Bioassay\n            </Typography>\n                <div className={classes.grow}> </div>\n                <div className={classes.seccionDesktop}>\n                    <Button onClick={closeSession} color=\"inherit\" >\n                        Salir\n                </Button>\n                    <Button color=\"inherit\">\n                        {sessionUser.user.name}\n\n                    </Button>\n                </div>\n                <div className={classes.seccionMobile}>\n                    <IconButton color=\"inherit\">\n                        <i className=\"material-icons\">more_vert</i>\n                    </IconButton>\n                </div>\n\n            </Toolbar>\n        </React.Fragment>\n\n    );\n};\n\nexport default withRouter(BarSession);","/Users/danielcr/Documents/GitHub/Biossay/GstFront/biossay-webapp/src/components/navigation/bar/leftMenu.js",[],"/Users/danielcr/Documents/GitHub/Biossay/GstFront/biossay-webapp/src/components/report/Report.js",[],"/Users/danielcr/Documents/GitHub/Biossay/GstFront/biossay-webapp/src/components/demand/ListDemand.js",[],"/Users/danielcr/Documents/GitHub/Biossay/GstFront/biossay-webapp/src/components/survey/Survey.js",[],"/Users/danielcr/Documents/GitHub/Biossay/GstFront/biossay-webapp/src/components/survey/ListSurvey.js",[],"/Users/danielcr/Documents/GitHub/Biossay/GstFront/biossay-webapp/src/components/demand/components/tableDemand.js",["196","197","198"],"import React,{ useState,useEffect} from \"react\"; \nimport { TableContainer, TableCell , FormControl,Select,MenuItem,\nTable,TableBody,TableHead,TableRow,ListSubheader} from \"@material-ui/core\";\nimport { getLines,getBranchByLine,getModelLinesByBranch } from \"../../../services/api/ConfigService\";\n\nconst TableDemand = (props)=>{\n \n    const { demandDetailModel, setDemandDetailModel} = props;\n    const [ lines, setLines ] = useState([]);\n    const [ branches, setBranches ] = useState([]);\n    const [ models , setModels ] = useState([]);\n\n\n    const saveDemandDeatil = (e)=>{\n       const { name , value } = e.target;\n       \n       setDemandDetailModel((last) => ({\n         ...last,\n         [name] : value\n       }))\n    }\n\n    useEffect(() => {\n      console.log(demandDetailModel);\n      getLinesAll();\n    }, [true])\n\n    const getLinesAll = ()=>{\n      getLines().then(response => {\n        setLines(response.data); \n        getBranchesAll();\n      });\n    }\n\n    const getBranchesAll = ()=>{\n      getBranchByLine(demandDetailModel.lineRequestDetail).then(response =>{\n        setBranches(response.data);\n        getModelsAll();\n      });\n    }\n\n    const getModelsAll = ()=>{\n      getModelLinesByBranch(demandDetailModel.mark).then(response =>{\n        setModels(response.data);\n      });\n    }\n\n    return(\n      <TableContainer  >\n      <Table   size=\"small\" aria-label=\"a dense table\">\n        <TableHead>\n          <TableRow>\n            <TableCell>LÍNEA</TableCell>\n            <TableCell align=\"right\">MARCA</TableCell>\n            <TableCell align=\"right\">MODELO</TableCell>\n            <TableCell align=\"right\">MEDIO</TableCell>\n            <TableCell align=\"right\">SERVICIO</TableCell>\n            <TableCell align=\"right\">LUGAR</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n\n            <TableRow key={''}>\n              <TableCell component=\"th\" scope=\"row\">\n              <FormControl fullWidth variant=\"outlined\"  > \n                    <Select \n                        fullWidth \n                        name=\"lineRequestDetail\"\n                        value={demandDetailModel.lineRequestDetail || '0'}\n                        onChange={saveDemandDeatil}\n                        onBlur = { getBranchesAll}\n                        >\n                        <MenuItem value=\"0\">\n                            <em>Seleccione</em>\n                        </MenuItem>\n                        {(lines.map((n) => \n                          <MenuItem value={n.id}>{n.name}</MenuItem>\n                        ))}\n \n                        </Select>\n                    \n                    </FormControl>\n              </TableCell>\n              <TableCell align=\"right\">\n                <FormControl fullWidth variant=\"outlined\"  > \n                      <Select\n                          fullWidth \n                          name=\"mark\"\n                          value={demandDetailModel.mark || '0'}\n                        onChange={saveDemandDeatil}\n                          onBlur={getModelsAll}\n                          >\n                          <MenuItem value=\"0\">\n                              <em>Seleccione</em>\n                          </MenuItem>\n                          {(branches.map((n) => \n                          <MenuItem value={n.id}>{n.name}</MenuItem>\n                        ))}\n                          </Select>\n                      \n                      </FormControl>\n              </TableCell>\n              <TableCell align=\"right\">              \n                 <FormControl fullWidth variant=\"outlined\"  > \n                    <Select \n                        fullWidth \n                        name=\"model\"\n                        onChange={saveDemandDeatil}\n                        value={demandDetailModel.model || '0'}\n                        >\n                        <MenuItem value=\"0\">\n                            <em>Seleccione</em>\n                        </MenuItem>\n                        {(models.map((n) => \n                          <MenuItem value={n.id}>{n.name}</MenuItem>\n                        ))}\n                        </Select>\n                    \n                    </FormControl> \n              </TableCell>\n              <TableCell align=\"right\">               \n              <FormControl fullWidth variant=\"outlined\"  > \n                    <Select\n                        fullWidth \n                        name=\"mediumRequestDetail\"\n                        onChange={saveDemandDeatil}\n                        value={demandDetailModel.mediumRequestDetail || '0'}\n                        >\n                        <MenuItem value=\"0\">\n                            <em>Seleccione</em>\n                        </MenuItem>\n                        <MenuItem value={1}>VIRTUAL</MenuItem>\n                        <MenuItem value={2}>PRESENCIAL</MenuItem>\n                        </Select>\n                    \n                    </FormControl> \n                    </TableCell>\n              <TableCell align=\"right\">             \n               <FormControl fullWidth variant=\"outlined\"  > \n                    <Select \n                        fullWidth\n                        name=\"serviceRequestDetail\"\n                        onChange={saveDemandDeatil}\n                        value={demandDetailModel.serviceRequestDetail || '0'}\n                        >\n                        <MenuItem value=\"0\">\n                            <em>Seleccione</em>\n                        </MenuItem>\n                        <MenuItem value={1}>ASESORÍA CIENTÍFICA</MenuItem> \n                        <MenuItem value={2}>INSTALACIÓN</MenuItem> \n                        <MenuItem value={3}>CAPACITACIÓN</MenuItem>\n                        <MenuItem value={4}>MANT. PREVENTIVO</MenuItem>\n                        <MenuItem value={5}>MANT. CORRECTIVO</MenuItem> \n                        <MenuItem value={6}>RETIRO</MenuItem> \n                        </Select>\n                    \n                    </FormControl>\n                     </TableCell>\n                     <TableCell align=\"right\">             \n               <FormControl fullWidth variant=\"outlined\"  > \n                    <Select \n                        fullWidth \n                        name=\"place\"\n                        onChange={saveDemandDeatil}\n                        value={demandDetailModel.place || '0'}\n                        >\n                        <MenuItem value=\"0\">\n                            <em>Seleccione</em>\n                        </MenuItem>\n                        <MenuItem value={1}>OFICINA</MenuItem> \n                        <MenuItem value={2}>PROVINCIA</MenuItem>\n                        <MenuItem value={3}>LIMA</MenuItem> \n                        </Select>\n                    \n                    </FormControl>\n                     </TableCell>\n            </TableRow>\n\n        </TableBody>\n      </Table>\n    </TableContainer>\n    );\n}\nexport default TableDemand;","/Users/danielcr/Documents/GitHub/Biossay/GstFront/biossay-webapp/src/components/security/Login.js",["199"],"import React,{useState} from 'react';\nimport { Container, Grid ,CardMedia, Typography,TextField, Button} from \"@material-ui/core\"; \nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Link from '@material-ui/core/Link';\nimport Box from '@material-ui/core/Box';\nimport { makeStyles } from '@material-ui/core/styles';\nimport {  loginUser } from '../../services/api/LoginService';\nimport { useStateValue } from \"../../context/store\";\nimport { withRouter } from 'react-router-dom';\nimport logoicon from '../logo.jpeg';\n\nfunction Copyright() {\n  return (\n    <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\n      {'Copyright © '}\n      <Link color=\"inherit\" href=\"https://material-ui.com/\">\n        Biossay\n      </Link>{' '}\n      {new Date().getFullYear()}\n      {'.'}\n    </Typography>\n  );\n}\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    marginTop: theme.spacing(8),\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center'\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: theme.palette.secondary.main,\n  },\n  form: {\n    width: '100%', // Fix IE 11 issue.\n    marginTop: theme.spacing(1),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n    color: \"white\"\n  },\n}));\n\nconst Login = (props) => {\n  const classes = useStyles();\n  const [{usuarioSesion}, dispatch]  = useStateValue();\n\n  const [ login , setLogin] = useState({\n    Login:'',\n    Password:''\n  })\n\n  const [ validateUserName, setValidateUserName] = useState({\n    isError : false,\n    Message : ''\n  });\n  \n  const [ validatePassword, setValidatePassword] = useState({\n    isError : false,\n    Message : ''\n  });\n\n  const saveLogin = (e) =>{\n    const { name , value} = e.target;\n    setLogin((last) => ({\n      ...last,\n      [name]: value\n    }))\n  }\n\n  const messageSnackbar = (msg) => {\n    dispatch({\n        type: \"OPEN_SNACKBAR\",\n        openMessage: {\n            open: true,\n            message: msg\n        }\n    })\n}\n\n  const sendLogin = () =>{\n    \n\n    if(login.Login === \"\"){ \n      setValidateUserName({ isError : true, Message : 'Ingrese un nombre válido'})\n    }\n    else if(login.Password === \"\" ){\n      setValidatePassword({ isError : true, Message : 'Ingrese una contraseña válida'})\n    }else{\n      loginUser(login , dispatch).then(response => {\n        \n        if(response.status === 200){\n          props.history.push('/dashboard');\n        }\n      }).catch(error => {\n        \n        messageSnackbar(\"Compruebe su conexión a internet\");\n      });\n    }\n\n\n  }\n\n  return (\n    <Container component=\"main\" maxWidth=\"xs\">\n      <CssBaseline />\n      <div className={classes.paper}>\n       \n        <CardMedia \n         component=\"img\"\n                    alt=\"Biossay\"\n                    height=\"auto\"\n                    image={logoicon}\n                />\n        <Typography component=\"h1\" variant=\"h5\">\n          Bienvenidos\n        </Typography>\n        <form className={classes.form} noValidate>\n          <TextField\n            variant=\"outlined\"\n            margin=\"normal\"\n            required\n            fullWidth\n            id=\"email\"\n            label=\"Usuario\"\n            name=\"Login\"\n            onChange={saveLogin}\n            value={login.Login}\n            autoComplete=\"email\"\n            autoFocus\n            helperText={validateUserName.Message}\n            error = {validateUserName.isError}\n          />\n          <TextField\n            variant=\"outlined\"\n            margin=\"normal\"\n            required\n            onChange={saveLogin}\n            fullWidth\n            name=\"Password\"\n            value={login.Password}\n            label=\"Contraseña\"\n            type=\"password\"\n            id=\"password\"\n            autoComplete=\"current-password\"\n            helperText={validatePassword.Message}\n            error = {validatePassword.isError}\n          />\n          <Button\n            fullWidth\n            variant=\"contained\"\n            color=\"primary\"\n            className={classes.submit}\n            onClick={sendLogin}\n          >\n            Ingresar\n          </Button>\n          <Grid container>\n            <Grid item xs>\n            </Grid> \n          </Grid>\n        </form>\n      </div>\n      <Box mt={8}>\n        <Copyright />\n      </Box>\n    </Container>\n  );\n}\nexport default withRouter(Login);","/Users/danielcr/Documents/GitHub/Biossay/GstFront/biossay-webapp/src/context/store.js",[],"/Users/danielcr/Documents/GitHub/Biossay/GstFront/biossay-webapp/src/context/initialState.js",[],"/Users/danielcr/Documents/GitHub/Biossay/GstFront/biossay-webapp/src/context/reducers/index.js",[],"/Users/danielcr/Documents/GitHub/Biossay/GstFront/biossay-webapp/src/context/reducers/sessionUserReducer.js",[],"/Users/danielcr/Documents/GitHub/Biossay/GstFront/biossay-webapp/src/context/reducers/openSnackbarReducer.js",[],"/Users/danielcr/Documents/GitHub/Biossay/GstFront/biossay-webapp/src/services/api/LoginService.js",["200"],"import HttpClient from \"../HttpClient\";\n\n\nconst token_seguridad = window.localStorage.getItem(\"token_id\");\nconst token_object = window.localStorage.getItem(\"token_employee\");\n\n \nexport const loginUser = (model,dispatch) =>{\n    \n    return new Promise((resolve, reject) => {\n        HttpClient.post('/Employee/Login' , model).then(response => {\n            resolve(response);\n            dispatch({\n                type:\"SESSION_START\",\n                session : response.data,\n                authenticated : true\n            })\n            window.localStorage.setItem(\"token_id\",response.data.id);\n            window.localStorage.setItem(\"token_employee\",JSON.stringify(response.data));\n        }).catch(error => {\n            resolve(error.response);\n        })\n    })\n}\n\nexport const SaveEmployeer = (model) =>{\n    return new Promise((resolve, reject) => {\n        HttpClient.post('/Employee/Save' , model).then(response => {\n            resolve(response);\n        }).catch(error => {\n            resolve(error.response);\n        })\n    })\n}\n\nexport const deleteEmployee = (model) =>{\n    return new Promise((resolve, reject) => {\n        HttpClient.post('/Employee/DeleteEmployee' , model).then(response => {\n            resolve(response);\n        }).catch(error => {\n            resolve(error.response);\n        })\n    })\n}\n\nexport const getEmployeers =()=> {\n   return new Promise((resolve, reject) => {\n        HttpClient.get('/Employee/GetEmployees').then(response => {\n            resolve(response);\n        }).catch(error => {\n            resolve(error.response);\n        })\n    })\n}\n\nexport const getEmployeeActually =(dispatch)=> {\n    return new Promise((resolve, reject) => {\n         HttpClient.get('/Employee/GetEmployeeById?id='+ token_seguridad).then(response => {\n             resolve(response);\n             \n             dispatch({\n                type:\"SESSION_START\",\n                session : response.data,\n                authenticated : true\n            })          \n         }).catch(error => {\n             resolve(error.response);\n         })\n     })\n }\n\nexport const getEmployeeById =(id)=> {\n    return new Promise((resolve, reject) => {\n         HttpClient.get('/Employee/GetEmployeeById?id='+ id).then(response => {\n             resolve(response);\n         }).catch(error => {\n             resolve(error.response);\n         })\n     })\n }\n\n export const getEmployeeByType = (id) =>{ \n    return new Promise((resolve, reject) => {\n        HttpClient.get('/Employee/GetEmployeeByType?id=' + id).then(response => {\n            resolve(response);\n        }).catch(error => {\n            resolve(error.response);\n        })\n    })\n}\n\nexport const getEmployeeAdviser = (id) =>{ \n    return new Promise((resolve, reject) => {\n        HttpClient.get('/Employee/GetEmployeeAdviser').then(response => {\n            resolve(response);\n        }).catch(error => {\n            resolve(error.response);\n        })\n    })\n}\n","/Users/danielcr/Documents/GitHub/Biossay/GstFront/biossay-webapp/src/services/HttpClient.js",[],"/Users/danielcr/Documents/GitHub/Biossay/GstFront/biossay-webapp/src/services/api/Demandservice.js",[],"/Users/danielcr/Documents/GitHub/Biossay/GstFront/biossay-webapp/src/services/api/ClientService.js",["201"],"import HttpClient from \"../HttpClient\";\nimport axios from \"axios\";\n\nexport const saveClientServer = (model) =>{ \n    return new Promise((resolve, reject) => {\n        HttpClient.post('/Client/SaveClient' , model).then(response => {\n            resolve(response.data);\n        }).catch(error => {\n            resolve(error.response);\n        })\n    })\n}\n\nexport const deleteClientServer = (model) =>{ \n    return new Promise((resolve, reject) => {\n        HttpClient.post('/Client/DeleteClient' , model).then(response => {\n            resolve(response.data);\n        }).catch(error => {\n            resolve(error.response);\n        })\n    })\n}\n\n\nexport const validateRUCClient = (model) =>{ \n    return new Promise((resolve, reject) => {\n        HttpClient.post('/Client/ValidateRUCClient' , model).then(response => {\n            resolve(response.data);\n        }).catch(error => {\n            resolve(error.response);\n        })\n    })\n}\n\n\nexport const getClientById =(id)=> {\n    return new Promise((resolve, reject) => {\n         HttpClient.get('/Client/GetClientById?id='+ id).then(response => {\n             resolve(response);\n         }).catch(error => {\n             resolve(error.response);\n         })\n     })\n }\n\n export const getClientFull =()=> {\n    return new Promise((resolve, reject) => {\n         HttpClient.get('/Client/GetClientFull').then(response => {\n             resolve(response);\n         }).catch(error => {\n             resolve(error.response);\n         })\n     })\n }\n\n\n export const getClients =()=> {\n    return new Promise((resolve, reject) => {\n         HttpClient.get('/Client/GetClients').then(response => {\n             resolve(response);\n         }).catch(error => {\n             resolve(error.response);\n         })\n     })\n }\n\n export const getRUC = (ruc)=>{\n    return new Promise((resolve, reject) => {\n        HttpClient.get('/Client/GetClientByRUC?id=' + ruc).then(response => {\n            resolve(response.data);\n        }).catch(error => {\n            resolve(error.response);\n        })\n    })\n }\n\n\n export const getRUCSunat = (ruc)=>{\n    return new Promise((resolve, reject) => {\n        HttpClient.get('/Client/GetClientrucsunat?id=' + ruc).then(response => {\n            resolve(response);\n        }).catch(error => {\n            resolve(error.response);\n        })\n    })\n }","/Users/danielcr/Documents/GitHub/Biossay/GstFront/biossay-webapp/src/components/configuration/Configuration.js",["202","203","204"],"import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Stepper from '@material-ui/core/Stepper';\nimport Step from '@material-ui/core/Step';\nimport StepButton from '@material-ui/core/StepButton';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport Enterprise from \"./components/enterprise\";\nimport Profiles from \"./components/profiles\";\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n      width: '100%',\n    },\n    button: {\n      marginRight: theme.spacing(1),\n    },\n    backButton: {\n      marginRight: theme.spacing(1),\n    },\n    completed: {\n      display: 'inline-block',\n    },\n    instructions: {\n      marginTop: theme.spacing(1),\n      marginBottom: theme.spacing(1),\n    },\n  }));\n  \n  function getSteps() {\n    return ['Empresa', 'Perfiles', 'Impresión' ];\n  }\n\n  function getStepContent(step) {\n    switch (step) {\n      case 0:\n        return <Enterprise />;\n      case 1:\n        return <Profiles />;\n      case 2:\n        return 'Step 3: This is the bit I really care about!';\n      default:\n        return 'Unknown step';\n    }\n  }\n\nconst Configuration = ()=>{\n    const classes = useStyles();\n    const [activeStep, setActiveStep] = React.useState(0);\n    const [completed, setCompleted] = React.useState(new Set());\n    const [skipped, setSkipped] = React.useState(new Set());\n    const steps = getSteps();\n  \n    const totalSteps = () => {\n      return getSteps().length;\n    };\n  \n    const isStepOptional = (step) => {\n      return step === 1;\n    };\n  \n    const handleSkip = () => {\n      if (!isStepOptional(activeStep)) {\n        // You probably want to guard against something like this\n        // it should never occur unless someone's actively trying to break something.\n        throw new Error(\"You can't skip a step that isn't optional.\");\n      }\n  \n      setActiveStep((prevActiveStep) => prevActiveStep + 1);\n      setSkipped((prevSkipped) => {\n        const newSkipped = new Set(prevSkipped.values());\n        newSkipped.add(activeStep);\n        return newSkipped;\n      });\n    };\n  \n    const skippedSteps = () => {\n      return skipped.size;\n    };\n  \n    const completedSteps = () => {\n      return completed.size;\n    };\n  \n    const allStepsCompleted = () => {\n      return completedSteps() === totalSteps() - skippedSteps();\n    };\n  \n    const isLastStep = () => {\n      return activeStep === totalSteps() - 1;\n    };\n  \n    const handleNext = () => {\n      const newActiveStep =\n        isLastStep() && !allStepsCompleted()\n          ? // It's the last step, but not all steps have been completed\n            // find the first step that has been completed\n            steps.findIndex((step, i) => !completed.has(i))\n          : activeStep + 1;\n  \n      setActiveStep(newActiveStep);\n    };\n  \n    const handleBack = () => {\n      setActiveStep((prevActiveStep) => prevActiveStep - 1);\n    };\n  \n    const handleStep = (step) => () => {\n      setActiveStep(step);\n    };\n  \n    const handleComplete = () => {\n      const newCompleted = new Set(completed);\n      newCompleted.add(activeStep);\n      setCompleted(newCompleted);\n  \n      /**\n       * Sigh... it would be much nicer to replace the following if conditional with\n       * `if (!this.allStepsComplete())` however state is not set when we do this,\n       * thus we have to resort to not being very DRY.\n       */\n      if (completed.size !== totalSteps() - skippedSteps()) {\n        handleNext();\n      }\n    };\n  \n    const handleReset = () => {\n      setActiveStep(0);\n      setCompleted(new Set());\n      setSkipped(new Set());\n    };\n  \n    const isStepSkipped = (step) => {\n      return skipped.has(step);\n    };\n  \n    function isStepComplete(step) {\n      return completed.has(step);\n    }\n  \n    return (\n      <div className={classes.root}>\n        <Stepper alternativeLabel nonLinear activeStep={activeStep}>\n          {steps.map((label, index) => {\n            const stepProps = {};\n            const buttonProps = {};\n            if (isStepOptional(index)) {\n              buttonProps.optional = <Typography variant=\"caption\">Optional</Typography>;\n            }\n            if (isStepSkipped(index)) {\n              stepProps.completed = false;\n            }\n            return (\n              <Step  key={label} {...stepProps}>\n                <StepButton\n                  onClick={handleStep(index)}\n                  completed={isStepComplete(index)}\n               \n                  {...buttonProps}\n                >\n                  {label}\n                </StepButton>\n              </Step>\n            );\n          })}\n        </Stepper>\n        <div>\n          {allStepsCompleted() ? (\n            <div>\n              <Typography className={classes.instructions}>\n                All steps completed - you&apos;re finished\n              </Typography>\n              <Button onClick={handleReset}>Reset</Button>\n            </div>\n          ) : (\n            <div>\n              {getStepContent(activeStep)}\n            </div>\n          )}\n        </div>\n      </div>\n    );\n}\nexport default Configuration;","/Users/danielcr/Documents/GitHub/Biossay/GstFront/biossay-webapp/src/components/configuration/components/enterprise.js",["205"],"import React, { useState , useEffect} from \"react\";\nimport { Container, Grid, Typography,TextField, Button } from \"@material-ui/core\";\nimport { saveCompany , getCompanyById} from \"../../../services/api/CompanyService\";\n\nconst Enterprise = ()=>{\n    const [ company, setCompany] = useState({\n         IdCompany : 0,\n         Address : '',\n         Branch:'',\n         Phone : '',\n         RUC: '',\n         SocialReason:'',\n         TradeName:''\n    }); \n\n    useEffect(() => {\n         getCompanyById(1).then(response =>{\n               setCompany({\n                    IdCompany : response.data.idCompany,\n                    Address : response.data.address,\n                    Branch : response.data.branch,\n                    Phone : response.data.phone,\n                    RUC : response.data.ruc,\n                    SocialReason : response.data.socialReason,\n                    TradeName : response.data.tradeName\n               });\n         }).catch(error =>{\n\n         });\n    }, [true])\n\n    const saveCompanyLocal = (e)=>{\n          const { name, value } = e.target;\n          setCompany((last)=>({\n               ...last,\n               [name]:value\n          }));\n    }\n\n    const sendCompany = ()=>{\n         \n         saveCompany(company).then(response =>{\n               \n         });\n    }\n\n\n\n    return(\n        <Container>\n                <Grid container spacing={2}>\n                    <Grid item sm={12} >\n                            <Typography> Datos de Empresa </Typography>\n                    </Grid>\n                    <Grid item sm={6}>\n                         <TextField onChange={saveCompanyLocal} fullWidth  name=\"RUC\" value={company.RUC} label=\"RUC\" variant=\"outlined\" />\n                    </Grid>\n                    <Grid item sm={6}>\n                         <TextField onChange={saveCompanyLocal} fullWidth  name=\"SocialReason\" value={company.SocialReason} label=\"Razón Social\" variant=\"outlined\" />\n                    </Grid>\n                    <Grid item sm={6}>\n                         <TextField onChange={saveCompanyLocal} fullWidth name=\"TradeName\" value={company.TradeName} label=\"Nombre Comercial\" variant=\"outlined\" />\n                    </Grid>\n                    <Grid item sm={6}>\n                         <TextField onChange={saveCompanyLocal} fullWidth name=\"Address\" value={company.Address} label=\"Dirección\" variant=\"outlined\" />\n                    </Grid>\n                    <Grid item sm={6}>\n                         <TextField  onChange={saveCompanyLocal} fullWidth  name=\"Phone\" value={company.Phone} label=\"Teléfono\" variant=\"outlined\" />\n                    </Grid>\n                    <Grid item sm={6}>\n                         <TextField  onChange={saveCompanyLocal} fullWidth name=\"Branch\" value={company.Branch} label=\"Sucursal\" variant=\"outlined\" />\n                    </Grid>\n                    <Grid item sm={12}>\n                         <Button variant=\"contained\" onClick={sendCompany} style={{color:\"white\"}} color=\"primary\" >Guardar</Button>\n                    </Grid>\n                </Grid>\n        </Container>\n    );\n}\nexport default Enterprise;","/Users/danielcr/Documents/GitHub/Biossay/GstFront/biossay-webapp/src/components/configuration/components/profiles.js",[],"/Users/danielcr/Documents/GitHub/Biossay/GstFront/biossay-webapp/src/components/dashboard/Dashboard.js",["206"],"import { Container, Grid, Typography,CardMedia } from \"@material-ui/core\";\nimport React from \"react\";\nimport logo from '../logo.jpeg';\nconst Dashboard = ()=>{\nreturn(\n    <Container>\n        <Grid container> \n            <CardMedia \n            component=\"img\"\n                    alt=\"Bioassay\"\n                    height=\"auto\"\n                    image={logo}\n                />\n        </Grid>\n    </Container>\n);\n}\nexport default Dashboard;","/Users/danielcr/Documents/GitHub/Biossay/GstFront/biossay-webapp/src/components/configuration/Services.js",[],"/Users/danielcr/Documents/GitHub/Biossay/GstFront/biossay-webapp/src/components/configuration/components/modalLine.js",[],"/Users/danielcr/Documents/GitHub/Biossay/GstFront/biossay-webapp/src/components/configuration/Branch.js",[],"/Users/danielcr/Documents/GitHub/Biossay/GstFront/biossay-webapp/src/components/configuration/components/modalBranch.js",[],"/Users/danielcr/Documents/GitHub/Biossay/GstFront/biossay-webapp/src/components/configuration/Model.js",[],"/Users/danielcr/Documents/GitHub/Biossay/GstFront/biossay-webapp/src/components/configuration/components/modalModel.js",[],"/Users/danielcr/Documents/GitHub/Biossay/GstFront/biossay-webapp/src/services/api/ConfigService.js",[],"/Users/danielcr/Documents/GitHub/Biossay/GstFront/biossay-webapp/src/services/api/CompanyService.js",[],"/Users/danielcr/Documents/GitHub/Biossay/GstFront/biossay-webapp/src/services/api/ReportService.js",[],"/Users/danielcr/Documents/GitHub/Biossay/GstFront/biossay-webapp/src/components/report/ListReport.js",["207"],"import React,{ useEffect, useState} from \"react\";\nimport { Container,Grid,Typography,TextField,Button } from \"@material-ui/core\";\nimport { DataGrid } from '@material-ui/data-grid'; \nimport { getReportsFull  } from \"../../services/api/ReportService\";\n\nconst ListReport = (props)=>{\n    \n    const [ rows , setRows] = useState([]);\n    const [ reportId , setDemandId] = useState([]);\n\n    useEffect(() => {\n        getReportsFull().then(response =>{\n            console.log(response);\n            setRows(response.data);\n        });\n    }, [true])\n\n    const columns = [\n        { field: 'id', headerName: 'Nº', width: 100 },\n        { field: 'reasonSocial', headerName: 'Cliente', width: 400},\n        { field: 'request', headerName: 'Solicitud', width: 140},\n        { field: 'team', headerName: 'Equipo', width: 150 },\n        { field: 'model', headerName: 'Modelo', width: 180 },\n        {\n          field: 'detail',\n          headerName: 'Detalle',\n          description: 'This column has a value getter and is not sortable.',\n          width: 140,\n          renderCell: (params) => (\n              <strong>\n                  <Button\n                      variant=\"contained\"\n                      size=\"small\"\n                      color=\"secondary\"\n                      style={{ marginLeft: 16 }}\n                      onClick={goToDetaillUser}\n                      \n                  >\n                      Detalle\n                </Button>\n              </strong>\n          ),\n      },\n      ];\n    \n      const goToDetaillUser =()=>{\n        props.history.push('/report/' + reportId);\n    }\n\n    const gotNew =()=>{\n        props.history.push('/report');\n      }\n\n    \n\n    return(\n        <Container>\n               <Grid container spacing={2} style={{marginTop:30}}>\n                <Grid item md={12} justify=\"center\" alignItems=\"center\">\n                    <Typography variant=\"h4\">Reportes Realizados </Typography> \n                </Grid>\n                    <Grid item md={4}>\n                    <TextField fullWidth id=\"outlined-basic\" label=\"Razón Social\" variant=\"outlined\" />\n                    </Grid>\n                    <Grid item md={4}>\n                    <TextField fullWidth id=\"outlined-basic\"   type=\"date\" variant=\"outlined\" />\n                    </Grid>\n                    <Grid item md={3}>\n                    <Button onClick={gotNew} variant=\"contained\" >Nuevo</Button>\n\n                    </Grid>\n                    <div style={{ height: 400, width: '100%',marginTop:20 }}>\n                    \n                    <DataGrid \n                        rows={rows}\n                        columns={columns}\n                        onSelectionModelChange={(newselection) =>{\n                          setDemandId(newselection.selectionModel[0]);\n                      }}  \n                    />\n                </div>\n                </Grid>\n        </Container>\n    );\n}\nexport default ListReport;","/Users/danielcr/Documents/GitHub/Biossay/GstFront/biossay-webapp/src/components/users/ListUser.js",[],"/Users/danielcr/Documents/GitHub/Biossay/GstFront/biossay-webapp/src/components/users/popup/detailUser.js",[],"/Users/danielcr/Documents/GitHub/Biossay/GstFront/biossay-webapp/src/components/customers/Customer.js",[],"/Users/danielcr/Documents/GitHub/Biossay/GstFront/biossay-webapp/src/components/customers/components/modalCustomer.js",[],"/Users/danielcr/Documents/GitHub/Biossay/GstFront/biossay-webapp/src/components/survey/ViewSurvey.js",[],{"ruleId":"208","replacedBy":"209"},{"ruleId":"210","replacedBy":"211"},{"ruleId":"212","severity":1,"message":"213","line":27,"column":12,"nodeType":"214","messageId":"215","endLine":27,"endColumn":23},{"ruleId":"216","severity":1,"message":"217","line":38,"column":6,"nodeType":"218","endLine":38,"endColumn":16,"suggestions":"219"},{"ruleId":"212","severity":1,"message":"220","line":7,"column":29,"nodeType":"214","messageId":"215","endLine":7,"endColumn":37},{"ruleId":"212","severity":1,"message":"220","line":72,"column":29,"nodeType":"214","messageId":"215","endLine":72,"endColumn":37},{"ruleId":"216","severity":1,"message":"221","line":100,"column":8,"nodeType":"218","endLine":100,"endColumn":18,"suggestions":"222"},{"ruleId":"212","severity":1,"message":"220","line":6,"column":29,"nodeType":"214","messageId":"215","endLine":6,"endColumn":37},{"ruleId":"212","severity":1,"message":"223","line":50,"column":27,"nodeType":"214","messageId":"215","endLine":50,"endColumn":39},{"ruleId":"212","severity":1,"message":"224","line":3,"column":36,"nodeType":"214","messageId":"215","endLine":3,"endColumn":49},{"ruleId":"216","severity":1,"message":"225","line":26,"column":8,"nodeType":"218","endLine":26,"endColumn":14,"suggestions":"226"},{"ruleId":"216","severity":1,"message":"227","line":26,"column":9,"nodeType":"228","endLine":26,"endColumn":13},{"ruleId":"212","severity":1,"message":"229","line":48,"column":11,"nodeType":"214","messageId":"215","endLine":48,"endColumn":24},{"ruleId":"212","severity":1,"message":"230","line":5,"column":7,"nodeType":"214","messageId":"215","endLine":5,"endColumn":19},{"ruleId":"212","severity":1,"message":"231","line":2,"column":8,"nodeType":"214","messageId":"215","endLine":2,"endColumn":13},{"ruleId":"212","severity":1,"message":"232","line":62,"column":11,"nodeType":"214","messageId":"215","endLine":62,"endColumn":21},{"ruleId":"212","severity":1,"message":"233","line":104,"column":11,"nodeType":"214","messageId":"215","endLine":104,"endColumn":21},{"ruleId":"212","severity":1,"message":"234","line":112,"column":11,"nodeType":"214","messageId":"215","endLine":112,"endColumn":25},{"ruleId":"216","severity":1,"message":"227","line":30,"column":9,"nodeType":"228","endLine":30,"endColumn":13},{"ruleId":"212","severity":1,"message":"235","line":1,"column":27,"nodeType":"214","messageId":"215","endLine":1,"endColumn":37},{"ruleId":"216","severity":1,"message":"227","line":16,"column":9,"nodeType":"228","endLine":16,"endColumn":13},"no-native-reassign",["236"],"no-negated-in-lhs",["237"],"no-unused-vars","'sessionUser' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["238"],"'dispatch' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'checkRoleFields'. Either include it or remove the dependency array.",["239"],"'setButtonBar' is assigned a value but never used.","'ListSubheader' is defined but never used.","React Hook useEffect has missing dependencies: 'demandDetailModel' and 'getLinesAll'. Either include them or remove the dependency array.",["240"],"The true literal is not a valid dependency because it never changes. You can safely remove it.","Literal","'usuarioSesion' is assigned a value but never used.","'token_object' is assigned a value but never used.","'axios' is defined but never used.","'handleSkip' is assigned a value but never used.","'handleBack' is assigned a value but never used.","'handleComplete' is assigned a value but never used.","'Typography' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"241","fix":"242"},{"desc":"243","fix":"244"},{"desc":"245","fix":"246"},"Update the dependencies array to be: [dispatch, startApp]",{"range":"247","text":"248"},"Update the dependencies array to be: [checkRoleFields, demandid]",{"range":"249","text":"250"},"Update the dependencies array to be: [demandDetailModel, getLinesAll]",{"range":"251","text":"252"},[1660,1670],"[dispatch, startApp]",[2971,2981],"[checkRoleFields, demandid]",[814,820],"[demandDetailModel, getLinesAll]"]